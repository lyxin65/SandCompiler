     1                                  
     2                                  
     3                                  
     4                                  
     5                                  
     6                                  
     7                                  default rel
     8                                  
     9                                  global __hasValue
    10                                  global __getValue
    11                                  global __setValue
    12                                  global __print
    13                                  global __println
    14                                  global __getString
    15                                  global __getInt
    16                                  global __toString
    17                                  global __string_length
    18                                  global __string_substring
    19                                  global __string_parseInt
    20                                  global __string_ord
    21                                  global __stringConcate
    22                                  global __stringCompare
    23                                  global __value
    24                                  global __has
    25                                  global __real_addr
    26                                  global main
    27                                  
    28                                  extern strcmp
    29                                  extern __sprintf_chk
    30                                  extern memcpy
    31                                  extern malloc
    32                                  extern __isoc99_scanf
    33                                  extern puts
    34                                  extern __printf_chk
    35                                  
    36                                  
    37                                  SECTION .text   6
    38                                  
    39                                  __hasValue:
    40 00000000 4889F8                          mov     rax, rdi
    41 00000003 48BA67BF102B4AE323-             mov     rdx, qword 1323E34A2B10BF67H
    42 0000000C 13                 
    43 0000000D 48F7EA                          imul    rdx
    44 00000010 4889F8                          mov     rax, rdi
    45 00000013 48C1F83F                        sar     rax, 63
    46 00000017 48C1FA03                        sar     rdx, 3
    47 0000001B 4829C2                          sub     rdx, rax
    48 0000001E B86B000000                      mov     eax, 107
    49 00000023 480FAFD0                        imul    rdx, rax
    50 00000027 4889F8                          mov     rax, rdi
    51 0000002A 4829D0                          sub     rax, rdx
    52 0000002D 4889C2                          mov     rdx, rax
    53 00000030 31C0                            xor     eax, eax
    54                                  
    55 00000032 48393CD5[807C0500]              cmp     qword [abs __real_addr+rdx*8], rdi
    56 0000003A 7404                            jz      L_002
    57                                  L_001:
    58                                  
    59 0000003C C3                              ret
    60                                  
    61                                  
    62                                  
    63                                  
    64                                  
    65 0000003D 90<rept>                ALIGN   8
    66 00000040 4881FED1000000          L_002:  cmp     rsi, 209
    67 00000047 77F3                            ja      L_001
    68 00000049 4869D2D2000000                  imul    rdx, rdx, 210
    69 00000050 4801D6                          add     rsi, rdx
    70                                  
    71 00000053 488B04F5[40BE0200]              mov     rax, qword [abs __has+rsi*8]
    72 0000005B C3                              ret
    73                                  
    74                                  
    75                                  
    76                                  
    77                                  
    78                                  
    79 0000005C 90<rept>                ALIGN   8
    80                                  
    81                                  __getValue:
    82 00000060 4889F8                          mov     rax, rdi
    83 00000063 48BA67BF102B4AE323-             mov     rdx, qword 1323E34A2B10BF67H
    84 0000006C 13                 
    85 0000006D 48F7EA                          imul    rdx
    86 00000070 4889F8                          mov     rax, rdi
    87 00000073 48C1F83F                        sar     rax, 63
    88 00000077 48C1FA03                        sar     rdx, 3
    89 0000007B 4829C2                          sub     rdx, rax
    90 0000007E B86B000000                      mov     eax, 107
    91 00000083 480FAFD0                        imul    rdx, rax
    92 00000087 4829D7                          sub     rdi, rdx
    93 0000008A 4869FFD2000000                  imul    rdi, rdi, 210
    94 00000091 4801FE                          add     rsi, rdi
    95                                  
    96 00000094 488B04F5[00000000]              mov     rax, qword [abs __value+rsi*8]
    97 0000009C C3                              ret
    98                                  
    99                                  
   100                                  
   101                                  
   102                                  
   103                                  
   104 0000009D 90<rept>                ALIGN   8
   105                                  
   106                                  __setValue:
   107 000000A0 4881FED1000000                  cmp     rsi, 209
   108 000000A7 4989D1                          mov     r9, rdx
   109 000000AA 0F87C0000000                    ja      L_008
   110 000000B0 49B867BF102B4AE323-             mov     r8, qword 1323E34A2B10BF67H
   111 000000B9 13                 
   112 000000BA 4889F8                          mov     rax, rdi
   113 000000BD 41BA6B000000                    mov     r10d, 107
   114 000000C3 49F7E8                          imul    r8
   115 000000C6 4889F8                          mov     rax, rdi
   116 000000C9 48C1F83F                        sar     rax, 63
   117 000000CD 4989D0                          mov     r8, rdx
   118 000000D0 49C1F803                        sar     r8, 3
   119 000000D4 4929C0                          sub     r8, rax
   120 000000D7 4889F8                          mov     rax, rdi
   121 000000DA 4D0FAFC2                        imul    r8, r10
   122 000000DE 4C29C0                          sub     rax, r8
   123 000000E1 4989C0                          mov     r8, rax
   124                                  
   125 000000E4 488B04C5[807C0500]              mov     rax, qword [abs __real_addr+rax*8]
   126 000000EC 4839F8                          cmp     rax, rdi
   127 000000EF 7457                            jz      L_007
   128 000000F1 4885C0                          test    rax, rax
   129 000000F4 0F84B6000000                    je      L_012
   130 000000FA 4969C090060000                  imul    rax, r8, 1680
   131 00000101 BA90060000                      mov     edx, 1680
   132                                  
   133 00000106 488DB8[40BE0200]                lea     rdi, [abs __has+rax]
   134 0000010D 40F6C701                        test    dil, 01H
   135 00000111 0F85A9000000                    jne     L_013
   136 00000117 40F6C702                L_003:  test    dil, 02H
   137 0000011B 0F85B7000000                    jne     L_014
   138 00000121 40F6C704                L_004:  test    dil, 04H
   139 00000125 0F85C5000000                    jne     L_015
   140 0000012B 89D1                    L_005:  mov     ecx, edx
   141 0000012D 31C0                            xor     eax, eax
   142 0000012F C1E903                          shr     ecx, 3
   143 00000132 F6C204                          test    dl, 04H
   144 00000135 F348AB                          rep stosq
   145 00000138 755E                            jnz     L_011
   146 0000013A F6C202                          test    dl, 02H
   147 0000013D 7541                            jnz     L_010
   148 0000013F 83E201                  L_006:  and     edx, 01H
   149 00000142 7534                            jnz     L_009
   150                                  
   151                                  
   152                                  
   153                                  
   154 00000144 90<rept>                ALIGN   8
   155 00000148 4C89C8                  L_007:  mov     rax, r9
   156 0000014B 4D69C0D2000000                  imul    r8, r8, 210
   157 00000152 4C01C6                          add     rsi, r8
   158                                  
   159 00000155 48C704F5[40BE0200]-             mov     qword [abs __has+rsi*8], 1
   160 0000015D 01000000           
   161                                  
   162 00000161 4C890CF5[00000000]              mov     qword [abs __value+rsi*8], r9
   163 00000169 C3                              ret
   164                                  
   165                                  
   166                                  
   167                                  
   168                                  
   169 0000016A 90<rept>                ALIGN   8
   170                                  L_008:
   171                                  
   172 00000170 C3                              ret
   173                                  
   174                                  
   175                                  
   176                                  
   177                                  
   178 00000171 90<rept>                ALIGN   8
   179 00000178 C60700                  L_009:  mov     byte [rdi], 0
   180 0000017B EBCB                            jmp     L_007
   181                                  
   182                                  
   183                                  
   184                                  
   185                                  
   186 0000017D 90<rept>                ALIGN   8
   187 00000180 31C0                    L_010:  xor     eax, eax
   188 00000182 4883C702                        add     rdi, 2
   189 00000186 668947FE                        mov     word [rdi-2H], ax
   190 0000018A 83E201                          and     edx, 01H
   191 0000018D 74B9                            jz      L_007
   192 0000018F EBE7                            jmp     L_009
   193                                  
   194                                  
   195                                  
   196                                  
   197                                  
   198 00000191 90<rept>                ALIGN   8
   199 00000198 C70700000000            L_011:  mov     dword [rdi], 0
   200 0000019E 4883C704                        add     rdi, 4
   201 000001A2 F6C202                          test    dl, 02H
   202 000001A5 7498                            jz      L_006
   203 000001A7 EBD7                            jmp     L_010
   204                                  
   205                                  
   206                                  
   207                                  
   208                                  
   209 000001A9 90<rept>                ALIGN   8
   210                                  L_012:
   211                                  
   212 000001B0 4A893CC5[807C0500]              mov     qword [abs __real_addr+r8*8], rdi
   213 000001B8 EB8E                            jmp     L_007
   214                                  
   215                                  
   216                                  
   217                                  
   218                                  
   219 000001BA 90<rept>                ALIGN   8
   220                                  L_013:
   221                                  
   222 000001C0 C680[40BE0200]00                mov     byte [abs __has+rax], 0
   223 000001C7 4883C701                        add     rdi, 1
   224 000001CB B28F                            mov     dl, -113
   225 000001CD E945FFFFFF                      jmp     L_003
   226                                  
   227                                  
   228                                  
   229                                  
   230                                  
   231 000001D2 90<rept>                ALIGN   8
   232 000001D8 31C9                    L_014:  xor     ecx, ecx
   233 000001DA 4883C702                        add     rdi, 2
   234 000001DE 83EA02                          sub     edx, 2
   235 000001E1 66894FFE                        mov     word [rdi-2H], cx
   236 000001E5 E937FFFFFF                      jmp     L_004
   237                                  
   238                                  
   239                                  
   240                                  
   241                                  
   242 000001EA 90<rept>                ALIGN   8
   243 000001F0 C70700000000            L_015:  mov     dword [rdi], 0
   244 000001F6 83EA04                          sub     edx, 4
   245 000001F9 4883C704                        add     rdi, 4
   246 000001FD E929FFFFFF                      jmp     L_005
   247                                  
   248                                  
   249                                  
   250                                  
   251                                  
   252                                  
   253                                  
   254 00000202 90<rept>                ALIGN   16
   255                                  
   256                                  __print:
   257 00000210 488D5708                        lea     rdx, [rdi+8H]
   258 00000214 BE[00000000]                    mov     esi, L_032
   259 00000219 BF01000000                      mov     edi, 1
   260 0000021E 31C0                            xor     eax, eax
   261 00000220 E9(00000000)                    jmp     __printf_chk
   262                                  
   263                                  
   264                                  
   265                                  
   266                                  
   267                                  
   268                                  
   269 00000225 90<rept>                ALIGN   16
   270                                  
   271                                  __println:
   272 00000230 4883C708                        add     rdi, 8
   273 00000234 E9(00000000)                    jmp     puts
   274                                  
   275                                  
   276                                  
   277                                  
   278                                  
   279                                  
   280 00000239 90<rept>                ALIGN   8
   281                                  
   282                                  __getString:
   283 00000240 55                              push    rbp
   284 00000241 BE[E07F0500]                    mov     esi, __buffer.3442
   285 00000246 BF[00000000]                    mov     edi, L_032
   286 0000024B 31C0                            xor     eax, eax
   287 0000024D 53                              push    rbx
   288 0000024E BB[E07F0500]                    mov     ebx, __buffer.3442
   289 00000253 4883EC08                        sub     rsp, 8
   290 00000257 E8(00000000)                    call    __isoc99_scanf
   291 0000025C 8B13                    L_016:  mov     edx, dword [rbx]
   292 0000025E 4883C304                        add     rbx, 4
   293 00000262 8D82FFFEFEFE                    lea     eax, [rdx-1010101H]
   294 00000268 F7D2                            not     edx
   295 0000026A 21D0                            and     eax, edx
   296 0000026C 2580808080                      and     eax, 80808080H
   297 00000271 74E9                            jz      L_016
   298 00000273 89C2                            mov     edx, eax
   299 00000275 C1EA10                          shr     edx, 16
   300 00000278 A980800000                      test    eax, 8080H
   301 0000027D 0F44C2                          cmove   eax, edx
   302 00000280 488D5302                        lea     rdx, [rbx+2H]
   303 00000284 480F44DA                        cmove   rbx, rdx
   304 00000288 00C0                            add     al, al
   305 0000028A 4883DB03                        sbb     rbx, 3
   306 0000028E 4881EB[E07F0500]                sub     rbx, __buffer.3442
   307 00000295 8D7B08                          lea     edi, [rbx+8H]
   308 00000298 4863FF                          movsxd  rdi, edi
   309 0000029B E8(00000000)                    call    malloc
   310 000002A0 4889C5                          mov     rbp, rax
   311 000002A3 488D5301                        lea     rdx, [rbx+1H]
   312 000002A7 4863C3                          movsxd  rax, ebx
   313 000002AA 488D7D08                        lea     rdi, [rbp+8H]
   314 000002AE 48894500                        mov     qword [rbp], rax
   315 000002B2 BE[E07F0500]                    mov     esi, __buffer.3442
   316 000002B7 E8(00000000)                    call    memcpy
   317 000002BC 4883C408                        add     rsp, 8
   318 000002C0 4889E8                          mov     rax, rbp
   319 000002C3 5B                              pop     rbx
   320 000002C4 5D                              pop     rbp
   321 000002C5 C3                              ret
   322                                  
   323                                  
   324                                  
   325                                  
   326                                  
   327                                  
   328                                  
   329 000002C6 90<rept>                ALIGN   16
   330                                  
   331                                  __getInt:
   332 000002D0 4883EC18                        sub     rsp, 24
   333 000002D4 BF[03000000]                    mov     edi, L_033
   334 000002D9 31C0                            xor     eax, eax
   335 000002DB 488D742408                      lea     rsi, [rsp+8H]
   336 000002E0 E8(00000000)                    call    __isoc99_scanf
   337 000002E5 488B442408                      mov     rax, qword [rsp+8H]
   338 000002EA 4883C418                        add     rsp, 24
   339 000002EE C3                              ret
   340                                  
   341                                  
   342 000002EF 90                              nop
   343                                  
   344                                  ALIGN   16
   345                                  __toString:
   346 000002F0 55                              push    rbp
   347 000002F1 4889FD                          mov     rbp, rdi
   348 000002F4 BF20000000                      mov     edi, 32
   349 000002F9 53                              push    rbx
   350 000002FA 4883EC08                        sub     rsp, 8
   351 000002FE E8(00000000)                    call    malloc
   352 00000303 488D7808                        lea     rdi, [rax+8H]
   353 00000307 4889C3                          mov     rbx, rax
   354 0000030A 4989E8                          mov     r8, rbp
   355 0000030D B9[03000000]                    mov     ecx, L_033
   356 00000312 BA18000000                      mov     edx, 24
   357 00000317 BE01000000                      mov     esi, 1
   358 0000031C 31C0                            xor     eax, eax
   359 0000031E E8(00000000)                    call    __sprintf_chk
   360 00000323 4898                            cdqe
   361 00000325 488903                          mov     qword [rbx], rax
   362 00000328 4883C408                        add     rsp, 8
   363 0000032C 4889D8                          mov     rax, rbx
   364 0000032F 5B                              pop     rbx
   365 00000330 5D                              pop     rbp
   366 00000331 C3                              ret
   367                                  
   368                                  
   369                                  
   370                                  
   371                                  
   372                                  
   373                                  
   374 00000332 90<rept>                ALIGN   16
   375                                  
   376                                  __string_length:
   377 00000340 488B07                          mov     rax, qword [rdi]
   378 00000343 C3                              ret
   379                                  
   380                                  
   381                                  
   382                                  
   383                                  
   384                                  
   385                                  
   386 00000344 90<rept>                ALIGN   16
   387                                  
   388                                  __string_substring:
   389 00000350 4157                            push    r15
   390 00000352 4156                            push    r14
   391 00000354 4155                            push    r13
   392 00000356 4C63EE                          movsxd  r13, esi
   393 00000359 4154                            push    r12
   394 0000035B 4189D4                          mov     r12d, edx
   395 0000035E 4529EC                          sub     r12d, r13d
   396 00000361 55                              push    rbp
   397 00000362 4889FD                          mov     rbp, rdi
   398 00000365 418D7C240A                      lea     edi, [r12+0AH]
   399 0000036A 53                              push    rbx
   400 0000036B 418D5C2401                      lea     ebx, [r12+1H]
   401 00000370 4863FF                          movsxd  rdi, edi
   402 00000373 4883EC08                        sub     rsp, 8
   403 00000377 E8(00000000)                    call    malloc
   404 0000037C 4863D3                          movsxd  rdx, ebx
   405 0000037F 85DB                            test    ebx, ebx
   406 00000381 488910                          mov     qword [rax], rdx
   407 00000384 0F8E23020000                    jle     L_018
   408 0000038A 418D7D08                        lea     edi, [r13+8H]
   409 0000038E 4901ED                          add     r13, rbp
   410 00000391 488D4818                        lea     rcx, [rax+18H]
   411 00000395 498D5508                        lea     rdx, [r13+8H]
   412 00000399 498D7518                        lea     rsi, [r13+18H]
   413 0000039D 4839D1                          cmp     rcx, rdx
   414 000003A0 488D5008                        lea     rdx, [rax+8H]
   415 000003A4 0F96C1                          setbe   cl
   416 000003A7 4839D6                          cmp     rsi, rdx
   417 000003AA 0F96C2                          setbe   dl
   418 000003AD 08D1                            or      cl, dl
   419 000003AF 0F841B020000                    je      L_019
   420 000003B5 83FB0F                          cmp     ebx, 15
   421 000003B8 0F8612020000                    jbe     L_019
   422 000003BE 89DE                            mov     esi, ebx
   423 000003C0 31D2                            xor     edx, edx
   424 000003C2 4531C0                          xor     r8d, r8d
   425 000003C5 C1EE04                          shr     esi, 4
   426 000003C8 89F1                            mov     ecx, esi
   427 000003CA C1E104                          shl     ecx, 4
   428 000003CD F3410F6F441508          L_017:  movdqu  xmm0, oword [r13+rdx+8H]
   429 000003D4 4183C001                        add     r8d, 1
   430 000003D8 F30F7F441008                    movdqu  oword [rax+rdx+8H], xmm0
   431 000003DE 4883C210                        add     rdx, 16
   432 000003E2 4139F0                          cmp     r8d, esi
   433 000003E5 72E6                            jc      L_017
   434 000003E7 39CB                            cmp     ebx, ecx
   435 000003E9 0F84BE010000                    je      L_018
   436 000003EF 8D140F                          lea     edx, [rdi+rcx]
   437 000003F2 448D6908                        lea     r13d, [rcx+8H]
   438 000003F6 4863D2                          movsxd  rdx, edx
   439 000003F9 0FB6741500                      movzx   esi, byte [rbp+rdx]
   440 000003FE 4963D5                          movsxd  rdx, r13d
   441 00000401 40883410                        mov     byte [rax+rdx], sil
   442 00000405 8D5101                          lea     edx, [rcx+1H]
   443 00000408 39D3                            cmp     ebx, edx
   444 0000040A 0F8E9D010000                    jle     L_018
   445 00000410 01FA                            add     edx, edi
   446 00000412 448D5909                        lea     r11d, [rcx+9H]
   447 00000416 4863D2                          movsxd  rdx, edx
   448 00000419 0FB6741500                      movzx   esi, byte [rbp+rdx]
   449 0000041E 4963D3                          movsxd  rdx, r11d
   450 00000421 40883410                        mov     byte [rax+rdx], sil
   451 00000425 8D5102                          lea     edx, [rcx+2H]
   452 00000428 39D3                            cmp     ebx, edx
   453 0000042A 0F8E7D010000                    jle     L_018
   454 00000430 01FA                            add     edx, edi
   455 00000432 448D510A                        lea     r10d, [rcx+0AH]
   456 00000436 4863D2                          movsxd  rdx, edx
   457 00000439 0FB6741500                      movzx   esi, byte [rbp+rdx]
   458 0000043E 4963D2                          movsxd  rdx, r10d
   459 00000441 40883410                        mov     byte [rax+rdx], sil
   460 00000445 8D5103                          lea     edx, [rcx+3H]
   461 00000448 39D3                            cmp     ebx, edx
   462 0000044A 0F8E5D010000                    jle     L_018
   463 00000450 01FA                            add     edx, edi
   464 00000452 448D490B                        lea     r9d, [rcx+0BH]
   465 00000456 4863D2                          movsxd  rdx, edx
   466 00000459 0FB6741500                      movzx   esi, byte [rbp+rdx]
   467 0000045E 4963D1                          movsxd  rdx, r9d
   468 00000461 40883410                        mov     byte [rax+rdx], sil
   469 00000465 8D5104                          lea     edx, [rcx+4H]
   470 00000468 39D3                            cmp     ebx, edx
   471 0000046A 0F8E3D010000                    jle     L_018
   472 00000470 01FA                            add     edx, edi
   473 00000472 448D410C                        lea     r8d, [rcx+0CH]
   474 00000476 4863D2                          movsxd  rdx, edx
   475 00000479 0FB6741500                      movzx   esi, byte [rbp+rdx]
   476 0000047E 4963D0                          movsxd  rdx, r8d
   477 00000481 40883410                        mov     byte [rax+rdx], sil
   478 00000485 8D5105                          lea     edx, [rcx+5H]
   479 00000488 39D3                            cmp     ebx, edx
   480 0000048A 0F8E1D010000                    jle     L_018
   481 00000490 01FA                            add     edx, edi
   482 00000492 8D710D                          lea     esi, [rcx+0DH]
   483 00000495 4863D2                          movsxd  rdx, edx
   484 00000498 440FB6741500                    movzx   r14d, byte [rbp+rdx]
   485 0000049E 4863D6                          movsxd  rdx, esi
   486 000004A1 44883410                        mov     byte [rax+rdx], r14b
   487 000004A5 8D5106                          lea     edx, [rcx+6H]
   488 000004A8 39D3                            cmp     ebx, edx
   489 000004AA 0F8EFD000000                    jle     L_018
   490 000004B0 01FA                            add     edx, edi
   491 000004B2 4863D2                          movsxd  rdx, edx
   492 000004B5 440FB67C1500                    movzx   r15d, byte [rbp+rdx]
   493 000004BB 8D510E                          lea     edx, [rcx+0EH]
   494 000004BE 4C63F2                          movsxd  r14, edx
   495 000004C1 46883C30                        mov     byte [rax+r14], r15b
   496 000004C5 448D7107                        lea     r14d, [rcx+7H]
   497 000004C9 4439F3                          cmp     ebx, r14d
   498 000004CC 0F8EDB000000                    jle     L_018
   499 000004D2 4101FE                          add     r14d, edi
   500 000004D5 4439EB                          cmp     ebx, r13d
   501 000004D8 4D63F6                          movsxd  r14, r14d
   502 000004DB 460FB67C3500                    movzx   r15d, byte [rbp+r14]
   503 000004E1 448D710F                        lea     r14d, [rcx+0FH]
   504 000004E5 4D63F6                          movsxd  r14, r14d
   505 000004E8 46883C30                        mov     byte [rax+r14], r15b
   506 000004EC 0F8EBB000000                    jle     L_018
   507 000004F2 4101FD                          add     r13d, edi
   508 000004F5 4439DB                          cmp     ebx, r11d
   509 000004F8 4D63ED                          movsxd  r13, r13d
   510 000004FB 460FB6742D00                    movzx   r14d, byte [rbp+r13]
   511 00000501 448D6910                        lea     r13d, [rcx+10H]
   512 00000505 4D63ED                          movsxd  r13, r13d
   513 00000508 46883428                        mov     byte [rax+r13], r14b
   514 0000050C 0F8E9B000000                    jle     L_018
   515 00000512 4101FB                          add     r11d, edi
   516 00000515 4439D3                          cmp     ebx, r10d
   517 00000518 4D63DB                          movsxd  r11, r11d
   518 0000051B 460FB66C1D00                    movzx   r13d, byte [rbp+r11]
   519 00000521 448D5911                        lea     r11d, [rcx+11H]
   520 00000525 4D63DB                          movsxd  r11, r11d
   521 00000528 46882C18                        mov     byte [rax+r11], r13b
   522 0000052C 7E7F                            jle     L_018
   523 0000052E 4101FA                          add     r10d, edi
   524 00000531 4439CB                          cmp     ebx, r9d
   525 00000534 4D63D2                          movsxd  r10, r10d
   526 00000537 460FB65C1500                    movzx   r11d, byte [rbp+r10]
   527 0000053D 448D5112                        lea     r10d, [rcx+12H]
   528 00000541 4D63D2                          movsxd  r10, r10d
   529 00000544 46881C10                        mov     byte [rax+r10], r11b
   530 00000548 7E63                            jle     L_018
   531 0000054A 4101F9                          add     r9d, edi
   532 0000054D 4439C3                          cmp     ebx, r8d
   533 00000550 4D63C9                          movsxd  r9, r9d
   534 00000553 460FB6540D00                    movzx   r10d, byte [rbp+r9]
   535 00000559 448D4913                        lea     r9d, [rcx+13H]
   536 0000055D 4D63C9                          movsxd  r9, r9d
   537 00000560 46881408                        mov     byte [rax+r9], r10b
   538 00000564 7E47                            jle     L_018
   539 00000566 4101F8                          add     r8d, edi
   540 00000569 39F3                            cmp     ebx, esi
   541 0000056B 4D63C0                          movsxd  r8, r8d
   542 0000056E 460FB64C0500                    movzx   r9d, byte [rbp+r8]
   543 00000574 448D4114                        lea     r8d, [rcx+14H]
   544 00000578 4D63C0                          movsxd  r8, r8d
   545 0000057B 46880C00                        mov     byte [rax+r8], r9b
   546 0000057F 7E2C                            jle     L_018
   547 00000581 01FE                            add     esi, edi
   548 00000583 39D3                            cmp     ebx, edx
   549 00000585 4863F6                          movsxd  rsi, esi
   550 00000588 440FB6443500                    movzx   r8d, byte [rbp+rsi]
   551 0000058E 8D7115                          lea     esi, [rcx+15H]
   552 00000591 4863F6                          movsxd  rsi, esi
   553 00000594 44880430                        mov     byte [rax+rsi], r8b
   554 00000598 7E13                            jle     L_018
   555 0000059A 01FA                            add     edx, edi
   556 0000059C 83C116                          add     ecx, 22
   557 0000059F 4863D2                          movsxd  rdx, edx
   558 000005A2 4863C9                          movsxd  rcx, ecx
   559 000005A5 0FB6541500                      movzx   edx, byte [rbp+rdx]
   560 000005AA 881408                          mov     byte [rax+rcx], dl
   561 000005AD 4183C409                L_018:  add     r12d, 9
   562 000005B1 4D63E4                          movsxd  r12, r12d
   563 000005B4 42C6042000                      mov     byte [rax+r12], 0
   564 000005B9 4883C408                        add     rsp, 8
   565 000005BD 5B                              pop     rbx
   566 000005BE 5D                              pop     rbp
   567 000005BF 415C                            pop     r12
   568 000005C1 415D                            pop     r13
   569 000005C3 415E                            pop     r14
   570 000005C5 415F                            pop     r15
   571 000005C7 C3                              ret
   572                                  
   573                                  
   574                                  
   575                                  
   576                                  
   577 000005C8 90<rept>                ALIGN   16
   578 000005D0 4863FF                  L_019:  movsxd  rdi, edi
   579 000005D3 31C9                            xor     ecx, ecx
   580 000005D5 4801FD                          add     rbp, rdi
   581                                  
   582                                  
   583                                  
   584                                  
   585 000005D8 90<rept>                ALIGN   16
   586 000005E0 0FB6540D00              L_020:  movzx   edx, byte [rbp+rcx]
   587 000005E5 88540808                        mov     byte [rax+rcx+8H], dl
   588 000005E9 4883C101                        add     rcx, 1
   589 000005ED 39CB                            cmp     ebx, ecx
   590 000005EF 7FEF                            jg      L_020
   591 000005F1 EBBA                            jmp     L_018
   592                                  
   593                                  
   594                                  
   595                                  
   596                                  
   597                                  
   598                                  
   599 000005F3 90<rept>                ALIGN   16
   600                                  
   601                                  __string_parseInt:
   602 00000600 0FBE5708                        movsx   edx, byte [rdi+8H]
   603 00000604 80FA2D                          cmp     dl, 45
   604 00000607 7447                            jz      L_024
   605 00000609 488D4F08                        lea     rcx, [rdi+8H]
   606 0000060D 31FF                            xor     edi, edi
   607 0000060F 8D42D0                  L_021:  lea     eax, [rdx-30H]
   608 00000612 3C09                            cmp     al, 9
   609 00000614 B800000000                      mov     eax, 0
   610 00000619 7723                            ja      L_023
   611                                  
   612                                  
   613                                  
   614                                  
   615 0000061B 90<rept>                ALIGN   8
   616 00000620 83EA30                  L_022:  sub     edx, 48
   617 00000623 488D0480                        lea     rax, [rax+rax*4]
   618 00000627 4883C101                        add     rcx, 1
   619 0000062B 4863D2                          movsxd  rdx, edx
   620 0000062E 488D0442                        lea     rax, [rdx+rax*2]
   621 00000632 0FBE11                          movsx   edx, byte [rcx]
   622 00000635 8D72D0                          lea     esi, [rdx-30H]
   623 00000638 4080FE09                        cmp     sil, 9
   624 0000063C 76E2                            jbe     L_022
   625 0000063E 4889C2                  L_023:  mov     rdx, rax
   626 00000641 48F7DA                          neg     rdx
   627 00000644 85FF                            test    edi, edi
   628 00000646 480F45C2                        cmovne  rax, rdx
   629 0000064A C3                              ret
   630                                  
   631                                  
   632                                  
   633                                  
   634                                  
   635 0000064B 90<rept>                ALIGN   8
   636 00000650 488D4F09                L_024:  lea     rcx, [rdi+9H]
   637 00000654 0FBE5709                        movsx   edx, byte [rdi+9H]
   638 00000658 BF01000000                      mov     edi, 1
   639 0000065D EBB0                            jmp     L_021
   640                                  
   641                                  
   642 0000065F 90                              nop
   643                                  
   644                                  ALIGN   16
   645                                  __string_ord:
   646 00000660 480FBE443708                    movsx   rax, byte [rdi+rsi+8H]
   647 00000666 C3                              ret
   648                                  
   649                                  
   650                                  
   651                                  
   652                                  
   653                                  
   654                                  
   655 00000667 90<rept>                ALIGN   16
   656                                  
   657                                  __stringConcate:
   658 00000670 4157                            push    r15
   659 00000672 4156                            push    r14
   660 00000674 4155                            push    r13
   661 00000676 4154                            push    r12
   662 00000678 4989F4                          mov     r12, rsi
   663 0000067B 55                              push    rbp
   664 0000067C 4889FD                          mov     rbp, rdi
   665 0000067F 53                              push    rbx
   666 00000680 4883EC08                        sub     rsp, 8
   667 00000684 488B1F                          mov     rbx, qword [rdi]
   668 00000687 4C8B2E                          mov     r13, qword [rsi]
   669 0000068A 4E8D342B                        lea     r14, [rbx+r13]
   670 0000068E 498D7E09                        lea     rdi, [r14+9H]
   671 00000692 E8(00000000)                    call    malloc
   672 00000697 4885DB                          test    rbx, rbx
   673 0000069A 4C8930                          mov     qword [rax], r14
   674 0000069D 0F8EFB010000                    jle     L_026
   675 000006A3 488D4D08                        lea     rcx, [rbp+8H]
   676 000006A7 488D5018                        lea     rdx, [rax+18H]
   677 000006AB 488D7518                        lea     rsi, [rbp+18H]
   678 000006AF 4839D1                          cmp     rcx, rdx
   679 000006B2 488D5008                        lea     rdx, [rax+8H]
   680 000006B6 0F93C1                          setae   cl
   681 000006B9 4839D6                          cmp     rsi, rdx
   682 000006BC 0F96C2                          setbe   dl
   683 000006BF 08D1                            or      cl, dl
   684 000006C1 0F8429020000                    je      L_029
   685 000006C7 4883FB0F                        cmp     rbx, 15
   686 000006CB 0F861F020000                    jbe     L_029
   687 000006D1 4889DE                          mov     rsi, rbx
   688 000006D4 31C9                            xor     ecx, ecx
   689 000006D6 31FF                            xor     edi, edi
   690 000006D8 48C1EE04                        shr     rsi, 4
   691 000006DC 4889F2                          mov     rdx, rsi
   692 000006DF 48C1E204                        shl     rdx, 4
   693 000006E3 F30F6F440D08            L_025:  movdqu  xmm0, oword [rbp+rcx+8H]
   694 000006E9 4883C701                        add     rdi, 1
   695 000006ED F30F7F440808                    movdqu  oword [rax+rcx+8H], xmm0
   696 000006F3 4883C110                        add     rcx, 16
   697 000006F7 4839FE                          cmp     rsi, rdi
   698 000006FA 77E7                            ja      L_025
   699 000006FC 4839D3                          cmp     rbx, rdx
   700 000006FF 0F8499010000                    je      L_026
   701 00000705 448D7208                        lea     r14d, [rdx+8H]
   702 00000709 4D63F6                          movsxd  r14, r14d
   703 0000070C 420FB64C3500                    movzx   ecx, byte [rbp+r14]
   704 00000712 42880C30                        mov     byte [rax+r14], cl
   705 00000716 8D4A01                          lea     ecx, [rdx+1H]
   706 00000719 4863C9                          movsxd  rcx, ecx
   707 0000071C 4839CB                          cmp     rbx, rcx
   708 0000071F 0F8E79010000                    jle     L_026
   709 00000725 448D5209                        lea     r10d, [rdx+9H]
   710 00000729 4963CA                          movsxd  rcx, r10d
   711 0000072C 0FB6740D00                      movzx   esi, byte [rbp+rcx]
   712 00000731 40883408                        mov     byte [rax+rcx], sil
   713 00000735 8D4A02                          lea     ecx, [rdx+2H]
   714 00000738 4863C9                          movsxd  rcx, ecx
   715 0000073B 4839CB                          cmp     rbx, rcx
   716 0000073E 0F8E5A010000                    jle     L_026
   717 00000744 448D4A0A                        lea     r9d, [rdx+0AH]
   718 00000748 4963C9                          movsxd  rcx, r9d
   719 0000074B 0FB6740D00                      movzx   esi, byte [rbp+rcx]
   720 00000750 40883408                        mov     byte [rax+rcx], sil
   721 00000754 8D4A03                          lea     ecx, [rdx+3H]
   722 00000757 4863C9                          movsxd  rcx, ecx
   723 0000075A 4839CB                          cmp     rbx, rcx
   724 0000075D 0F8E3B010000                    jle     L_026
   725 00000763 448D420B                        lea     r8d, [rdx+0BH]
   726 00000767 4963C8                          movsxd  rcx, r8d
   727 0000076A 0FB6740D00                      movzx   esi, byte [rbp+rcx]
   728 0000076F 40883408                        mov     byte [rax+rcx], sil
   729 00000773 8D4A04                          lea     ecx, [rdx+4H]
   730 00000776 4863C9                          movsxd  rcx, ecx
   731 00000779 4839CB                          cmp     rbx, rcx
   732 0000077C 0F8E1C010000                    jle     L_026
   733 00000782 8D7A0C                          lea     edi, [rdx+0CH]
   734 00000785 4863CF                          movsxd  rcx, edi
   735 00000788 0FB6740D00                      movzx   esi, byte [rbp+rcx]
   736 0000078D 40883408                        mov     byte [rax+rcx], sil
   737 00000791 8D4A05                          lea     ecx, [rdx+5H]
   738 00000794 4863C9                          movsxd  rcx, ecx
   739 00000797 4839CB                          cmp     rbx, rcx
   740 0000079A 0F8EFE000000                    jle     L_026
   741 000007A0 8D720D                          lea     esi, [rdx+0DH]
   742 000007A3 4863CE                          movsxd  rcx, esi
   743 000007A6 440FB65C0D00                    movzx   r11d, byte [rbp+rcx]
   744 000007AC 44881C08                        mov     byte [rax+rcx], r11b
   745 000007B0 8D4A06                          lea     ecx, [rdx+6H]
   746 000007B3 4863C9                          movsxd  rcx, ecx
   747 000007B6 4839CB                          cmp     rbx, rcx
   748 000007B9 0F8EDF000000                    jle     L_026
   749 000007BF 8D4A0E                          lea     ecx, [rdx+0EH]
   750 000007C2 4C63D9                          movsxd  r11, ecx
   751 000007C5 460FB67C1D00                    movzx   r15d, byte [rbp+r11]
   752 000007CB 46883C18                        mov     byte [rax+r11], r15b
   753 000007CF 448D5A07                        lea     r11d, [rdx+7H]
   754 000007D3 4D63DB                          movsxd  r11, r11d
   755 000007D6 4C39DB                          cmp     rbx, r11
   756 000007D9 0F8EBF000000                    jle     L_026
   757 000007DF 448D5A0F                        lea     r11d, [rdx+0FH]
   758 000007E3 4C39F3                          cmp     rbx, r14
   759 000007E6 4D63DB                          movsxd  r11, r11d
   760 000007E9 460FB67C1D00                    movzx   r15d, byte [rbp+r11]
   761 000007EF 46883C18                        mov     byte [rax+r11], r15b
   762 000007F3 0F8EA5000000                    jle     L_026
   763 000007F9 448D5A10                        lea     r11d, [rdx+10H]
   764 000007FD 4D63D2                          movsxd  r10, r10d
   765 00000800 4C39D3                          cmp     rbx, r10
   766 00000803 4D63DB                          movsxd  r11, r11d
   767 00000806 460FB6741D00                    movzx   r14d, byte [rbp+r11]
   768 0000080C 46883418                        mov     byte [rax+r11], r14b
   769 00000810 0F8E88000000                    jle     L_026
   770 00000816 448D5211                        lea     r10d, [rdx+11H]
   771 0000081A 4D63C9                          movsxd  r9, r9d
   772 0000081D 4C39CB                          cmp     rbx, r9
   773 00000820 4D63D2                          movsxd  r10, r10d
   774 00000823 460FB65C1500                    movzx   r11d, byte [rbp+r10]
   775 00000829 46881C10                        mov     byte [rax+r10], r11b
   776 0000082D 7E6F                            jle     L_026
   777 0000082F 448D4A12                        lea     r9d, [rdx+12H]
   778 00000833 4D63C0                          movsxd  r8, r8d
   779 00000836 4C39C3                          cmp     rbx, r8
   780 00000839 4D63C9                          movsxd  r9, r9d
   781 0000083C 460FB6540D00                    movzx   r10d, byte [rbp+r9]
   782 00000842 46881408                        mov     byte [rax+r9], r10b
   783 00000846 7E56                            jle     L_026
   784 00000848 448D4213                        lea     r8d, [rdx+13H]
   785 0000084C 4863FF                          movsxd  rdi, edi
   786 0000084F 4839FB                          cmp     rbx, rdi
   787 00000852 4D63C0                          movsxd  r8, r8d
   788 00000855 460FB64C0500                    movzx   r9d, byte [rbp+r8]
   789 0000085B 46880C00                        mov     byte [rax+r8], r9b
   790 0000085F 7E3D                            jle     L_026
   791 00000861 8D7A14                          lea     edi, [rdx+14H]
   792 00000864 4863F6                          movsxd  rsi, esi
   793 00000867 4839F3                          cmp     rbx, rsi
   794 0000086A 4863FF                          movsxd  rdi, edi
   795 0000086D 440FB6443D00                    movzx   r8d, byte [rbp+rdi]
   796 00000873 44880438                        mov     byte [rax+rdi], r8b
   797 00000877 7E25                            jle     L_026
   798 00000879 8D7215                          lea     esi, [rdx+15H]
   799 0000087C 4863C9                          movsxd  rcx, ecx
   800 0000087F 4839CB                          cmp     rbx, rcx
   801 00000882 4863F6                          movsxd  rsi, esi
   802 00000885 0FB67C3500                      movzx   edi, byte [rbp+rsi]
   803 0000088A 40883C30                        mov     byte [rax+rsi], dil
   804 0000088E 7E0E                            jle     L_026
   805 00000890 83C216                          add     edx, 22
   806 00000893 4863D2                          movsxd  rdx, edx
   807 00000896 0FB64C1500                      movzx   ecx, byte [rbp+rdx]
   808 0000089B 880C10                          mov     byte [rax+rdx], cl
   809 0000089E 4D85ED                  L_026:  test    r13, r13
   810 000008A1 7E69                            jle     L_031
   811 000008A3 498D7501                        lea     rsi, [r13+1H]
   812 000008A7 4883C308                        add     rbx, 8
   813 000008AB BA01000000                      mov     edx, 1
   814 000008B0 31C9                            xor     ecx, ecx
   815                                  
   816                                  
   817                                  
   818                                  
   819 000008B2 90<rept>                ALIGN   8
   820 000008B8 410FB67C1407            L_027:  movzx   edi, byte [r12+rdx+7H]
   821 000008BE 4801C1                          add     rcx, rax
   822 000008C1 40883C19                        mov     byte [rcx+rbx], dil
   823 000008C5 4889D1                          mov     rcx, rdx
   824 000008C8 4883C201                        add     rdx, 1
   825 000008CC 4839F2                          cmp     rdx, rsi
   826 000008CF 75E7                            jnz     L_027
   827 000008D1 4901C5                  L_028:  add     r13, rax
   828 000008D4 41C6441D0000                    mov     byte [r13+rbx], 0
   829 000008DA 4883C408                        add     rsp, 8
   830 000008DE 5B                              pop     rbx
   831 000008DF 5D                              pop     rbp
   832 000008E0 415C                            pop     r12
   833 000008E2 415D                            pop     r13
   834 000008E4 415E                            pop     r14
   835 000008E6 415F                            pop     r15
   836 000008E8 C3                              ret
   837                                  
   838                                  
   839                                  
   840                                  
   841                                  
   842 000008E9 90<rept>                ALIGN   8
   843 000008F0 31D2                    L_029:  xor     edx, edx
   844                                  
   845                                  
   846                                  
   847                                  
   848 000008F2 90<rept>                ALIGN   8
   849 000008F8 0FB64C1508              L_030:  movzx   ecx, byte [rbp+rdx+8H]
   850 000008FD 884C1008                        mov     byte [rax+rdx+8H], cl
   851 00000901 4883C201                        add     rdx, 1
   852 00000905 4839D3                          cmp     rbx, rdx
   853 00000908 75EE                            jnz     L_030
   854 0000090A EB92                            jmp     L_026
   855                                  
   856 0000090C 4883C308                L_031:  add     rbx, 8
   857 00000910 EBBF                            jmp     L_028
   858                                  
   859                                  
   860                                  
   861                                  
   862                                  
   863                                  
   864                                  
   865 00000912 90<rept>                ALIGN   16
   866                                  
   867                                  __stringCompare:
   868 00000920 4883EC08                        sub     rsp, 8
   869 00000924 4883C608                        add     rsi, 8
   870 00000928 4883C708                        add     rdi, 8
   871 0000092C E8(00000000)                    call    strcmp
   872 00000931 4883C408                        add     rsp, 8
   873 00000935 4898                            cdqe
   874 00000937 C3                              ret
   875                                  
   876                                  
   877                                  
   878                                  SECTION .data   
   879                                  
   880                                  
   881                                  SECTION .bss    align=32
   882                                  
   883                                  __value:
   884 00000000 <res 0002BE40>                  resq    22472
   885                                  
   886                                  __has:
   887 0002BE40 <res 0002BE40>                  resq    22472
   888                                  
   889                                  __real_addr:
   890 00057C80 <res 00000360>                  resq    108
   891                                  
   892                                  __buffer.3442:
   893 00057FE0 <res 00100000>                  resb    1048576
   894                                  
   895                                  
   896                                  SECTION .text.startup 6
   897                                  
   898                                  main:
   899 00000000 31C0                            xor     eax, eax
   900 00000002 E9(C31A0000)                    jmp     __init
   901                                  
   902                                  
   903                                  
   904                                  SECTION .rodata.str1.1 
   905                                  
   906                                  L_032:
   907 00000000 257300                          db 25H, 73H, 00H
   908                                  
   909                                  L_033:
   910 00000003 256C6400                        db 25H, 6CH, 64H, 00H
   911                                  
   912                                  
   913                                  ;=====================================================================
   914                                  	 section .text
   915                                  _max:
   916                                  	b0:
   917 00000938 55                      	push rbp
   918 00000939 4889E5                  	mov rbp, rsp
   919 0000093C 4889F8                  	mov rax, rdi
   920 0000093F 4889F1                  	mov rcx, rsi
   921 00000942 4839C8                  	cmp rax, rcx
   922 00000945 7F05                    	jg b1
   923                                  	b2:
   924 00000947 4889C8                  	mov rax, rcx
   925 0000094A EB00                    	jmp b3
   926                                  	b1:
   927                                  	b3:
   928 0000094C C9                      	leave
   929 0000094D C3                      	ret 
   930                                  _equ:
   931                                  	b4:
   932 0000094E 55                      	push rbp
   933 0000094F 4889E5                  	mov rbp, rsp
   934 00000952 4889F9                  	mov rcx, rdi
   935 00000955 4889F0                  	mov rax, rsi
   936 00000958 4883F900                	cmp rcx, 0
   937 0000095C 7423                    	je b5
   938                                  	b6:
   939 0000095E 4883F800                	cmp rax, 0
   940 00000962 7416                    	je b7
   941                                  	b8:
   942 00000964 488B09                  	mov rcx, qword [rcx]
   943 00000967 483B08                  	cmp rcx, qword [rax]
   944 0000096A 7407                    	je b9
   945                                  	b10:
   946 0000096C B800000000              	mov rax, 0
   947 00000971 EB05                    	jmp b11
   948                                  	b9:
   949 00000973 B801000000              	mov rax, 1
   950                                  	b11:
   951 00000978 EB19                    	jmp b12
   952                                  	b7:
   953                                  	b13:
   954 0000097A B800000000              	mov rax, 0
   955                                  	b14:
   956 0000097F EB12                    	jmp b12
   957                                  	b5:
   958 00000981 4883F800                	cmp rax, 0
   959 00000985 7407                    	je b15
   960                                  	b16:
   961                                  	b17:
   962 00000987 B800000000              	mov rax, 0
   963                                  	b18:
   964 0000098C EB05                    	jmp b12
   965                                  	b15:
   966                                  	b19:
   967 0000098E B801000000              	mov rax, 1
   968                                  	b20:
   969                                  	b12:
   970 00000993 C9                      	leave
   971 00000994 C3                      	ret 
   972                                  _merge:
   973                                  	b21:
   974 00000995 55                      	push rbp
   975 00000996 4889E5                  	mov rbp, rsp
   976 00000999 4155                    	push r13
   977 0000099B 4156                    	push r14
   978 0000099D 53                      	push rbx
   979 0000099E 4157                    	push r15
   980 000009A0 4989FD                  	mov r13, rdi
   981 000009A3 4989F7                  	mov r15, rsi
   982 000009A6 4989D6                  	mov r14, rdx
   983 000009A9 4C89F9                  	mov rcx, r15
   984 000009AC 4C89E8                  	mov rax, r13
   985 000009AF 4883C001                	add rax, 1
   986 000009B3 4889C6                  	mov rsi, rax
   987 000009B6 4889CF                  	mov rdi, rcx
   988 000009B9 E85C0D0000              	call _splay_tree.find
   989 000009BE 4889C3                  	mov rbx, rax
   990 000009C1 4889D8                  	mov rax, rbx
   991 000009C4 BE00000000              	mov rsi, 0
   992 000009C9 4889C7                  	mov rdi, rax
   993 000009CC E8280A0000              	call _Node.rotto
   994 000009D1 4C89F8                  	mov rax, r15
   995 000009D4 488918                  	mov qword [rax], rbx
   996 000009D7 4C89F8                  	mov rax, r15
   997 000009DA 4C89EE                  	mov rsi, r13
   998 000009DD 4889C7                  	mov rdi, rax
   999 000009E0 E8350D0000              	call _splay_tree.find
  1000 000009E5 4889C3                  	mov rbx, rax
  1001 000009E8 4889D9                  	mov rcx, rbx
  1002 000009EB 4C89F8                  	mov rax, r15
  1003 000009EE 488B30                  	mov rsi, qword [rax]
  1004 000009F1 4889CF                  	mov rdi, rcx
  1005 000009F4 E8000A0000              	call _Node.rotto
  1006 000009F9 4889D8                  	mov rax, rbx
  1007 000009FC 488B4850                	mov rcx, qword [rax + 80]
  1008 00000A00 4C89F0                  	mov rax, r14
  1009 00000A03 488B00                  	mov rax, qword [rax]
  1010 00000A06 48894110                	mov qword [rcx + 16], rax
  1011 00000A0A 4C89F0                  	mov rax, r14
  1012 00000A0D 488B00                  	mov rax, qword [rax]
  1013 00000A10 48895858                	mov qword [rax + 88], rbx
  1014 00000A14 4889D8                  	mov rax, rbx
  1015 00000A17 BE00000000              	mov rsi, 0
  1016 00000A1C 4889C7                  	mov rdi, rax
  1017 00000A1F E8D5090000              	call _Node.rotto
  1018 00000A24 4C89F8                  	mov rax, r15
  1019 00000A27 488918                  	mov qword [rax], rbx
  1020                                  	b22:
  1021 00000A2A 415F                    	pop r15
  1022 00000A2C 5B                      	pop rbx
  1023 00000A2D 415E                    	pop r14
  1024 00000A2F 415D                    	pop r13
  1025 00000A31 C9                      	leave
  1026 00000A32 C3                      	ret 
  1027                                  _main:
  1028                                  	b23:
  1029 00000A33 55                      	push rbp
  1030 00000A34 4889E5                  	mov rbp, rsp
  1031 00000A37 4883EC10                	sub rsp, 16
  1032 00000A3B 4154                    	push r12
  1033 00000A3D 4155                    	push r13
  1034 00000A3F 4156                    	push r14
  1035 00000A41 53                      	push rbx
  1036 00000A42 4157                    	push r15
  1037 00000A44 4C8B3D(38000000)        	mov r15, qword [g_0]
  1038 00000A4B 488B05(10000000)        	mov rax, qword [g_1]
  1039 00000A52 488905(10000000)        	mov qword [g_1], rax
  1040 00000A59 488B05(30000000)        	mov rax, qword [g_2]
  1041 00000A60 488905(30000000)        	mov qword [g_2], rax
  1042 00000A67 488B05(28000000)        	mov rax, qword [g_3]
  1043 00000A6E 488905(28000000)        	mov qword [g_3], rax
  1044 00000A75 488B05(00000000)        	mov rax, qword [g_4]
  1045 00000A7C 488905(00000000)        	mov qword [g_4], rax
  1046 00000A83 488B05(18000000)        	mov rax, qword [g_5]
  1047 00000A8A 488905(18000000)        	mov qword [g_5], rax
  1048 00000A91 488B05(40000000)        	mov rax, qword [g_6]
  1049 00000A98 488905(40000000)        	mov qword [g_6], rax
  1050 00000A9F E82CF8FFFF              	call __getInt
  1051 00000AA4 488905(10000000)        	mov qword [g_1], rax
  1052 00000AAB E820F8FFFF              	call __getInt
  1053 00000AB0 488905(18000000)        	mov qword [g_5], rax
  1054 00000AB7 BF08000000              	mov rdi, 8
  1055 00000ABC E8(00000000)            	call malloc
  1056 00000AC1 4989C7                  	mov r15, rax
  1057 00000AC4 4C89FF                  	mov rdi, r15
  1058 00000AC7 E8F8090000              	call _splay_tree.splay_tree
  1059 00000ACC 4C89F8                  	mov rax, r15
  1060 00000ACF 488905(30000000)        	mov qword [g_2], rax
  1061 00000AD6 BF08000000              	mov rdi, 8
  1062 00000ADB E8(00000000)            	call malloc
  1063 00000AE0 4989C7                  	mov r15, rax
  1064 00000AE3 4C89FF                  	mov rdi, r15
  1065 00000AE6 E8D9090000              	call _splay_tree.splay_tree
  1066 00000AEB 488B05(00000000)        	mov rax, qword [g_4]
  1067 00000AF2 4889C1                  	mov rcx, rax
  1068 00000AF5 48F7D9                  	neg rcx
  1069 00000AF8 488B05(28000000)        	mov rax, qword [g_3]
  1070 00000AFF 48894808                	mov qword [rax + 8], rcx
  1071 00000B03 488B05(10000000)        	mov rax, qword [g_1]
  1072 00000B0A 4889C2                  	mov rdx, rax
  1073 00000B0D 4883C201                	add rdx, 1
  1074 00000B11 488B05(00000000)        	mov rax, qword [g_4]
  1075 00000B18 4889C1                  	mov rcx, rax
  1076 00000B1B 48F7D9                  	neg rcx
  1077 00000B1E 488B05(28000000)        	mov rax, qword [g_3]
  1078 00000B25 48894CD008              	mov qword [rax + rdx * 8 + 8], rcx
  1079 00000B2A B801000000              	mov rax, 1
  1080 00000B2F 488945F8                	mov qword [rbp - 8], rax
  1081                                  	b24:
  1082 00000B33 488B45F8                	mov rax, qword [rbp - 8]
  1083 00000B37 488B0D(10000000)        	mov rcx, qword [g_1]
  1084 00000B3E 4839C8                  	cmp rax, rcx
  1085 00000B41 0F8E33030000            	jle b25
  1086                                  	b26:
  1087 00000B47 488B05(30000000)        	mov rax, qword [g_2]
  1088 00000B4E 4889C1                  	mov rcx, rax
  1089 00000B51 488B05(10000000)        	mov rax, qword [g_1]
  1090 00000B58 4889C2                  	mov rdx, rax
  1091 00000B5B 4883C201                	add rdx, 1
  1092 00000B5F 488B05(28000000)        	mov rax, qword [g_3]
  1093 00000B66 488905(28000000)        	mov qword [g_3], rax
  1094 00000B6D BE00000000              	mov rsi, 0
  1095 00000B72 4889CF                  	mov rdi, rcx
  1096 00000B75 E8280B0000              	call _splay_tree.build_tree
  1097 00000B7A 488B05(28000000)        	mov rax, qword [g_3]
  1098 00000B81 488905(28000000)        	mov qword [g_3], rax
  1099 00000B88 B801000000              	mov rax, 1
  1100 00000B8D 488945F8                	mov qword [rbp - 8], rax
  1101                                  	b27:
  1102 00000B91 488B45F8                	mov rax, qword [rbp - 8]
  1103 00000B95 488B0D(18000000)        	mov rcx, qword [g_5]
  1104 00000B9C 4839C8                  	cmp rax, rcx
  1105 00000B9F 7E6B                    	jle b28
  1106                                  	b29:
  1107 00000BA1 B800000000              	mov rax, 0
  1108                                  	b30:
  1109 00000BA6 4C893D(38000000)        	mov qword [g_0], r15
  1110 00000BAD 488B0D(10000000)        	mov rcx, qword [g_1]
  1111 00000BB4 48890D(10000000)        	mov qword [g_1], rcx
  1112 00000BBB 488B0D(30000000)        	mov rcx, qword [g_2]
  1113 00000BC2 48890D(30000000)        	mov qword [g_2], rcx
  1114 00000BC9 488B0D(28000000)        	mov rcx, qword [g_3]
  1115 00000BD0 48890D(28000000)        	mov qword [g_3], rcx
  1116 00000BD7 488B0D(00000000)        	mov rcx, qword [g_4]
  1117 00000BDE 48890D(00000000)        	mov qword [g_4], rcx
  1118 00000BE5 488B0D(18000000)        	mov rcx, qword [g_5]
  1119 00000BEC 48890D(18000000)        	mov qword [g_5], rcx
  1120 00000BF3 488B0D(40000000)        	mov rcx, qword [g_6]
  1121 00000BFA 48890D(40000000)        	mov qword [g_6], rcx
  1122 00000C01 415F                    	pop r15
  1123 00000C03 5B                      	pop rbx
  1124 00000C04 415E                    	pop r14
  1125 00000C06 415D                    	pop r13
  1126 00000C08 415C                    	pop r12
  1127 00000C0A C9                      	leave
  1128 00000C0B C3                      	ret 
  1129                                  	b28:
  1130 00000C0C E82FF6FFFF              	call __getString
  1131 00000C11 4989C6                  	mov r14, rax
  1132 00000C14 4C89F0                  	mov rax, r14
  1133 00000C17 BE00000000              	mov rsi, 0
  1134 00000C1C 4889C7                  	mov rdi, rax
  1135 00000C1F E83CFAFFFF              	call __string_ord
  1136 00000C24 4889C3                  	mov rbx, rax
  1137 00000C27 488B05(40000000)        	mov rax, qword [g_6]
  1138 00000C2E BE00000000              	mov rsi, 0
  1139 00000C33 4889C7                  	mov rdi, rax
  1140 00000C36 E825FAFFFF              	call __string_ord
  1141 00000C3B 4839C3                  	cmp rbx, rax
  1142 00000C3E 756F                    	jne b31
  1143                                  	b32:
  1144 00000C40 E88BF6FFFF              	call __getInt
  1145 00000C45 4989C4                  	mov r12, rax
  1146 00000C48 E883F6FFFF              	call __getInt
  1147 00000C4D 4989C5                  	mov r13, rax
  1148 00000C50 BB01000000              	mov rbx, 1
  1149                                  	b33:
  1150 00000C55 4C39EB                  	cmp rbx, r13
  1151 00000C58 0F8E00020000            	jle b34
  1152                                  	b35:
  1153 00000C5E 4C89F9                  	mov rcx, r15
  1154 00000C61 488B05(28000000)        	mov rax, qword [g_3]
  1155 00000C68 488905(28000000)        	mov qword [g_3], rax
  1156 00000C6F 4C89EA                  	mov rdx, r13
  1157 00000C72 BE01000000              	mov rsi, 1
  1158 00000C77 4889CF                  	mov rdi, rcx
  1159 00000C7A E8230A0000              	call _splay_tree.build_tree
  1160 00000C7F 488B05(28000000)        	mov rax, qword [g_3]
  1161 00000C86 488905(28000000)        	mov qword [g_3], rax
  1162 00000C8D 4C89E0                  	mov rax, r12
  1163 00000C90 4883C001                	add rax, 1
  1164 00000C94 4889C7                  	mov rdi, rax
  1165 00000C97 488B05(30000000)        	mov rax, qword [g_2]
  1166 00000C9E 4889C1                  	mov rcx, rax
  1167 00000CA1 4C89F8                  	mov rax, r15
  1168 00000CA4 4889C2                  	mov rdx, rax
  1169 00000CA7 4889CE                  	mov rsi, rcx
  1170 00000CAA E8E6FCFFFF              	call _merge
  1171                                  	b31:
  1172 00000CAF 4C89F0                  	mov rax, r14
  1173 00000CB2 BE00000000              	mov rsi, 0
  1174 00000CB7 4889C7                  	mov rdi, rax
  1175 00000CBA E8A1F9FFFF              	call __string_ord
  1176 00000CBF 4889C3                  	mov rbx, rax
  1177 00000CC2 488B05(40000000)        	mov rax, qword [g_6]
  1178 00000CC9 BE01000000              	mov rsi, 1
  1179 00000CCE 4889C7                  	mov rdi, rax
  1180 00000CD1 E88AF9FFFF              	call __string_ord
  1181 00000CD6 4839C3                  	cmp rbx, rax
  1182 00000CD9 752F                    	jne b36
  1183                                  	b37:
  1184 00000CDB E8F0F5FFFF              	call __getInt
  1185 00000CE0 4889C3                  	mov rbx, rax
  1186 00000CE3 E8E8F5FFFF              	call __getInt
  1187 00000CE8 4889C2                  	mov rdx, rax
  1188 00000CEB 488B05(30000000)        	mov rax, qword [g_2]
  1189 00000CF2 4889DE                  	mov rsi, rbx
  1190 00000CF5 4883C601                	add rsi, 1
  1191 00000CF9 4889D9                  	mov rcx, rbx
  1192 00000CFC 4801D1                  	add rcx, rdx
  1193 00000CFF 4889CA                  	mov rdx, rcx
  1194 00000D02 4889C7                  	mov rdi, rax
  1195 00000D05 E8150B0000              	call _splay_tree.del
  1196                                  	b36:
  1197 00000D0A 4C89F0                  	mov rax, r14
  1198 00000D0D BE00000000              	mov rsi, 0
  1199 00000D12 4889C7                  	mov rdi, rax
  1200 00000D15 E846F9FFFF              	call __string_ord
  1201 00000D1A 4883F852                	cmp rax, 82
  1202 00000D1E 752C                    	jne b38
  1203                                  	b39:
  1204 00000D20 E8ABF5FFFF              	call __getInt
  1205 00000D25 4889C3                  	mov rbx, rax
  1206 00000D28 E8A3F5FFFF              	call __getInt
  1207 00000D2D 4889C1                  	mov rcx, rax
  1208 00000D30 488B05(30000000)        	mov rax, qword [g_2]
  1209 00000D37 4889DE                  	mov rsi, rbx
  1210 00000D3A 4883C601                	add rsi, 1
  1211 00000D3E 4889DA                  	mov rdx, rbx
  1212 00000D41 4801CA                  	add rdx, rcx
  1213 00000D44 4889C7                  	mov rdi, rax
  1214 00000D47 E8240C0000              	call _splay_tree.rol
  1215                                  	b38:
  1216 00000D4C 4C89F0                  	mov rax, r14
  1217 00000D4F BE00000000              	mov rsi, 0
  1218 00000D54 4889C7                  	mov rdi, rax
  1219 00000D57 E804F9FFFF              	call __string_ord
  1220 00000D5C 4883F847                	cmp rax, 71
  1221 00000D60 7559                    	jne b40
  1222                                  	b41:
  1223 00000D62 E869F5FFFF              	call __getInt
  1224 00000D67 4889C3                  	mov rbx, rax
  1225 00000D6A E861F5FFFF              	call __getInt
  1226 00000D6F 4889C1                  	mov rcx, rax
  1227 00000D72 4883F900                	cmp rcx, 0
  1228 00000D76 7F14                    	jg b42
  1229                                  	b43:
  1230 00000D78 48B8-                   	mov rax, g_7
  1231 00000D7A [4800000000000000] 
  1232 00000D82 4889C7                  	mov rdi, rax
  1233 00000D85 E886F4FFFF              	call __print
  1234 00000D8A EB2F                    	jmp b44
  1235                                  	b42:
  1236 00000D8C 488B05(30000000)        	mov rax, qword [g_2]
  1237 00000D93 4889C7                  	mov rdi, rax
  1238 00000D96 4889D8                  	mov rax, rbx
  1239 00000D99 4883C001                	add rax, 1
  1240 00000D9D 4889DA                  	mov rdx, rbx
  1241 00000DA0 4801CA                  	add rdx, rcx
  1242 00000DA3 4889C6                  	mov rsi, rax
  1243 00000DA6 E8650C0000              	call _splay_tree.getsum
  1244 00000DAB 4889C7                  	mov rdi, rax
  1245 00000DAE E83DF5FFFF              	call __toString
  1246 00000DB3 4889C7                  	mov rdi, rax
  1247 00000DB6 E875F4FFFF              	call __println
  1248                                  	b44:
  1249                                  	b40:
  1250 00000DBB 4C89F0                  	mov rax, r14
  1251 00000DBE BE00000000              	mov rsi, 0
  1252 00000DC3 4889C7                  	mov rdi, rax
  1253 00000DC6 E895F8FFFF              	call __string_ord
  1254 00000DCB 4883F84D                	cmp rax, 77
  1255 00000DCF 757D                    	jne b45
  1256                                  	b46:
  1257 00000DD1 4C89F0                  	mov rax, r14
  1258 00000DD4 BE02000000              	mov rsi, 2
  1259 00000DD9 4889C7                  	mov rdi, rax
  1260 00000DDC E87FF8FFFF              	call __string_ord
  1261 00000DE1 4883F84B                	cmp rax, 75
  1262 00000DE5 7433                    	je b47
  1263                                  	b48:
  1264 00000DE7 488B05(30000000)        	mov rax, qword [g_2]
  1265 00000DEE 4889C7                  	mov rdi, rax
  1266 00000DF1 E8AE0C0000              	call _splay_tree.getMax
  1267 00000DF6 4889C7                  	mov rdi, rax
  1268 00000DF9 E8F2F4FFFF              	call __toString
  1269 00000DFE 48BE-                   	mov rsi, g_8
  1270 00000E00 [5300000000000000] 
  1271 00000E08 4889C7                  	mov rdi, rax
  1272 00000E0B E860F8FFFF              	call __stringConcate
  1273 00000E10 4889C7                  	mov rdi, rax
  1274 00000E13 E8F8F3FFFF              	call __print
  1275 00000E18 EB34                    	jmp b49
  1276                                  	b47:
  1277 00000E1A E8B1F4FFFF              	call __getInt
  1278 00000E1F 4889C3                  	mov rbx, rax
  1279 00000E22 E8A9F4FFFF              	call __getInt
  1280 00000E27 4989C6                  	mov r14, rax
  1281 00000E2A E8A1F4FFFF              	call __getInt
  1282 00000E2F 488B0D(30000000)        	mov rcx, qword [g_2]
  1283 00000E36 4889CF                  	mov rdi, rcx
  1284 00000E39 4889DE                  	mov rsi, rbx
  1285 00000E3C 4883C601                	add rsi, 1
  1286 00000E40 4889DA                  	mov rdx, rbx
  1287 00000E43 4C01F2                  	add rdx, r14
  1288 00000E46 4889C1                  	mov rcx, rax
  1289 00000E49 E8780A0000              	call _splay_tree.change
  1290                                  	b49:
  1291                                  	b45:
  1292                                  	b50:
  1293 00000E4E 488B45F8                	mov rax, qword [rbp - 8]
  1294 00000E52 48FFC0                  	inc rax
  1295 00000E55 488945F8                	mov qword [rbp - 8], rax
  1296 00000E59 E933FDFFFF              	jmp b27
  1297                                  	b34:
  1298 00000E5E E86DF4FFFF              	call __getInt
  1299 00000E63 4889C1                  	mov rcx, rax
  1300 00000E66 488B05(28000000)        	mov rax, qword [g_3]
  1301 00000E6D 48894CD808              	mov qword [rax + rbx * 8 + 8], rcx
  1302                                  	b51:
  1303 00000E72 48FFC3                  	inc rbx
  1304 00000E75 E9DBFDFFFF              	jmp b33
  1305                                  	b25:
  1306 00000E7A E851F4FFFF              	call __getInt
  1307 00000E7F 488B15(28000000)        	mov rdx, qword [g_3]
  1308 00000E86 488B4DF8                	mov rcx, qword [rbp - 8]
  1309 00000E8A 488944CA08              	mov qword [rdx + rcx * 8 + 8], rax
  1310                                  	b52:
  1311 00000E8F 488B45F8                	mov rax, qword [rbp - 8]
  1312 00000E93 488B45F8                	mov rax, qword [rbp - 8]
  1313 00000E97 48FFC0                  	inc rax
  1314 00000E9A 488945F8                	mov qword [rbp - 8], rax
  1315 00000E9E E990FCFFFF              	jmp b24
  1316                                  _Node.copy:
  1317                                  	b53:
  1318 00000EA3 55                      	push rbp
  1319 00000EA4 4889E5                  	mov rbp, rsp
  1320 00000EA7 4889FA                  	mov rdx, rdi
  1321 00000EAA 4889F1                  	mov rcx, rsi
  1322 00000EAD 4889C8                  	mov rax, rcx
  1323 00000EB0 488B00                  	mov rax, qword [rax]
  1324 00000EB3 488902                  	mov qword [rdx], rax
  1325 00000EB6 4889C8                  	mov rax, rcx
  1326 00000EB9 488B4008                	mov rax, qword [rax + 8]
  1327 00000EBD 48894208                	mov qword [rdx + 8], rax
  1328 00000EC1 4889C8                  	mov rax, rcx
  1329 00000EC4 488B4010                	mov rax, qword [rax + 16]
  1330 00000EC8 48894210                	mov qword [rdx + 16], rax
  1331 00000ECC 4889C8                  	mov rax, rcx
  1332 00000ECF 488B4018                	mov rax, qword [rax + 24]
  1333 00000ED3 48894218                	mov qword [rdx + 24], rax
  1334 00000ED7 4889C8                  	mov rax, rcx
  1335 00000EDA 488B4020                	mov rax, qword [rax + 32]
  1336 00000EDE 48894220                	mov qword [rdx + 32], rax
  1337 00000EE2 4889C8                  	mov rax, rcx
  1338 00000EE5 488B4028                	mov rax, qword [rax + 40]
  1339 00000EE9 48894228                	mov qword [rdx + 40], rax
  1340 00000EED 4889C8                  	mov rax, rcx
  1341 00000EF0 488B4030                	mov rax, qword [rax + 48]
  1342 00000EF4 48894230                	mov qword [rdx + 48], rax
  1343 00000EF8 4889C8                  	mov rax, rcx
  1344 00000EFB 488B4038                	mov rax, qword [rax + 56]
  1345 00000EFF 48894238                	mov qword [rdx + 56], rax
  1346 00000F03 4889C8                  	mov rax, rcx
  1347 00000F06 488B4040                	mov rax, qword [rax + 64]
  1348 00000F0A 48894240                	mov qword [rdx + 64], rax
  1349 00000F0E 4889C8                  	mov rax, rcx
  1350 00000F11 488B4048                	mov rax, qword [rax + 72]
  1351 00000F15 48894248                	mov qword [rdx + 72], rax
  1352 00000F19 488B7250                	mov rsi, qword [rdx + 80]
  1353 00000F1D 4889C8                  	mov rax, rcx
  1354 00000F20 488B4050                	mov rax, qword [rax + 80]
  1355 00000F24 488B4008                	mov rax, qword [rax + 8]
  1356 00000F28 48894608                	mov qword [rsi + 8], rax
  1357 00000F2C 488B7250                	mov rsi, qword [rdx + 80]
  1358 00000F30 4889C8                  	mov rax, rcx
  1359 00000F33 488B4050                	mov rax, qword [rax + 80]
  1360 00000F37 488B4010                	mov rax, qword [rax + 16]
  1361 00000F3B 48894610                	mov qword [rsi + 16], rax
  1362 00000F3F 4889C8                  	mov rax, rcx
  1363 00000F42 488B4058                	mov rax, qword [rax + 88]
  1364 00000F46 48894258                	mov qword [rdx + 88], rax
  1365                                  	b54:
  1366 00000F4A C9                      	leave
  1367 00000F4B C3                      	ret 
  1368                                  _Node.init:
  1369                                  	b55:
  1370 00000F4C 55                      	push rbp
  1371 00000F4D 4889E5                  	mov rbp, rsp
  1372 00000F50 4156                    	push r14
  1373 00000F52 53                      	push rbx
  1374 00000F53 4157                    	push r15
  1375 00000F55 4889FB                  	mov rbx, rdi
  1376 00000F58 4889F1                  	mov rcx, rsi
  1377 00000F5B 4889D0                  	mov rax, rdx
  1378 00000F5E 488903                  	mov qword [rbx], rax
  1379 00000F61 48C7431001000000        	mov qword [rbx + 16], 1
  1380 00000F69 48C7432000000000        	mov qword [rbx + 32], 0
  1381 00000F71 48C7433000000000        	mov qword [rbx + 48], 0
  1382 00000F79 48C7432800000000        	mov qword [rbx + 40], 0
  1383 00000F81 48894B18                	mov qword [rbx + 24], rcx
  1384 00000F85 48894B08                	mov qword [rbx + 8], rcx
  1385 00000F89 48894B38                	mov qword [rbx + 56], rcx
  1386 00000F8D 48894B40                	mov qword [rbx + 64], rcx
  1387 00000F91 48894B48                	mov qword [rbx + 72], rcx
  1388 00000F95 41BE02000000            	mov r14, 2
  1389 00000F9B 4A8D04F508000000        	lea rax, [r14 * 8 + 8]
  1390 00000FA3 4889C7                  	mov rdi, rax
  1391 00000FA6 E8(00000000)            	call malloc
  1392 00000FAB 4989C7                  	mov r15, rax
  1393 00000FAE 4D8937                  	mov qword [r15], r14
  1394                                  	b56:
  1395 00000FB1 4983FE00                	cmp r14, 0
  1396 00000FB5 7F2B                    	jg b57
  1397                                  	b58:
  1398 00000FB7 4C897B50                	mov qword [rbx + 80], r15
  1399 00000FBB 488B4350                	mov rax, qword [rbx + 80]
  1400 00000FBF 48C7400800000000        	mov qword [rax + 8], 0
  1401 00000FC7 488B4350                	mov rax, qword [rbx + 80]
  1402 00000FCB 48C7401000000000        	mov qword [rax + 16], 0
  1403 00000FD3 48C7435800000000        	mov qword [rbx + 88], 0
  1404                                  	b59:
  1405 00000FDB 415F                    	pop r15
  1406 00000FDD 5B                      	pop rbx
  1407 00000FDE 415E                    	pop r14
  1408 00000FE0 C9                      	leave
  1409 00000FE1 C3                      	ret 
  1410                                  	b57:
  1411 00000FE2 BF08000000              	mov rdi, 8
  1412 00000FE7 E8(00000000)            	call malloc
  1413 00000FEC 48C70000000000          	mov qword [rax], 0
  1414 00000FF3 4B8904F7                	mov qword [r15 + r14 * 8], rax
  1415 00000FF7 49FFCE                  	dec r14
  1416 00000FFA EBB5                    	jmp b56
  1417                                  _Node.judge:
  1418                                  	b60:
  1419 00000FFC 55                      	push rbp
  1420 00000FFD 4889E5                  	mov rbp, rsp
  1421 00001000 4889F8                  	mov rax, rdi
  1422 00001003 4889F1                  	mov rcx, rsi
  1423 00001006 488B4050                	mov rax, qword [rax + 80]
  1424 0000100A 488B4008                	mov rax, qword [rax + 8]
  1425 0000100E 4889CE                  	mov rsi, rcx
  1426 00001011 4889C7                  	mov rdi, rax
  1427 00001014 E835F9FFFF              	call _equ
  1428 00001019 4883F800                	cmp rax, 0
  1429 0000101D 7507                    	jne b61
  1430                                  	b62:
  1431 0000101F B801000000              	mov rax, 1
  1432 00001024 EB05                    	jmp b63
  1433                                  	b61:
  1434 00001026 B800000000              	mov rax, 0
  1435                                  	b63:
  1436 0000102B C9                      	leave
  1437 0000102C C3                      	ret 
  1438                                  _Node.push_up:
  1439                                  	b64:
  1440 0000102D 55                      	push rbp
  1441 0000102E 4889E5                  	mov rbp, rsp
  1442 00001031 4156                    	push r14
  1443 00001033 53                      	push rbx
  1444 00001034 4157                    	push r15
  1445 00001036 4889FB                  	mov rbx, rdi
  1446 00001039 48C7431001000000        	mov qword [rbx + 16], 1
  1447 00001041 488B4308                	mov rax, qword [rbx + 8]
  1448 00001045 48894318                	mov qword [rbx + 24], rax
  1449 00001049 41BF00000000            	mov r15, 0
  1450                                  	b65:
  1451 0000104F 4983FF02                	cmp r15, 2
  1452 00001053 0F8C8D010000            	jl b66
  1453                                  	b67:
  1454 00001059 488B4308                	mov rax, qword [rbx + 8]
  1455 0000105D 48894338                	mov qword [rbx + 56], rax
  1456 00001061 488B4308                	mov rax, qword [rbx + 8]
  1457 00001065 48894340                	mov qword [rbx + 64], rax
  1458 00001069 488B4308                	mov rax, qword [rbx + 8]
  1459 0000106D 48894348                	mov qword [rbx + 72], rax
  1460 00001071 4C8B7B08                	mov r15, qword [rbx + 8]
  1461 00001075 4C8B7308                	mov r14, qword [rbx + 8]
  1462 00001079 488B4350                	mov rax, qword [rbx + 80]
  1463 0000107D 4883780800              	cmp qword [rax + 8], 0
  1464 00001082 743B                    	je b68
  1465                                  	b69:
  1466 00001084 488B4350                	mov rax, qword [rbx + 80]
  1467 00001088 488B4008                	mov rax, qword [rax + 8]
  1468 0000108C 488B4038                	mov rax, qword [rax + 56]
  1469 00001090 48894338                	mov qword [rbx + 56], rax
  1470 00001094 488B4350                	mov rax, qword [rbx + 80]
  1471 00001098 488B4008                	mov rax, qword [rax + 8]
  1472 0000109C 4C037818                	add r15, qword [rax + 24]
  1473 000010A0 488B4350                	mov rax, qword [rbx + 80]
  1474 000010A4 488B4008                	mov rax, qword [rax + 8]
  1475 000010A8 488B4040                	mov rax, qword [rax + 64]
  1476 000010AC B900000000              	mov rcx, 0
  1477 000010B1 4889CE                  	mov rsi, rcx
  1478 000010B4 4889C7                  	mov rdi, rax
  1479 000010B7 E87CF8FFFF              	call _max
  1480 000010BC 4901C6                  	add r14, rax
  1481                                  	b68:
  1482 000010BF 488B4350                	mov rax, qword [rbx + 80]
  1483 000010C3 4883781000              	cmp qword [rax + 16], 0
  1484 000010C8 743B                    	je b70
  1485                                  	b71:
  1486 000010CA 488B4350                	mov rax, qword [rbx + 80]
  1487 000010CE 488B4010                	mov rax, qword [rax + 16]
  1488 000010D2 488B4040                	mov rax, qword [rax + 64]
  1489 000010D6 48894340                	mov qword [rbx + 64], rax
  1490 000010DA 488B4350                	mov rax, qword [rbx + 80]
  1491 000010DE 488B4010                	mov rax, qword [rax + 16]
  1492 000010E2 4C037018                	add r14, qword [rax + 24]
  1493 000010E6 488B4350                	mov rax, qword [rbx + 80]
  1494 000010EA 488B4010                	mov rax, qword [rax + 16]
  1495 000010EE 488B4038                	mov rax, qword [rax + 56]
  1496 000010F2 B900000000              	mov rcx, 0
  1497 000010F7 4889CE                  	mov rsi, rcx
  1498 000010FA 4889C7                  	mov rdi, rax
  1499 000010FD E836F8FFFF              	call _max
  1500 00001102 4901C7                  	add r15, rax
  1501                                  	b70:
  1502 00001105 488B4338                	mov rax, qword [rbx + 56]
  1503 00001109 4C89F9                  	mov rcx, r15
  1504 0000110C 4889CE                  	mov rsi, rcx
  1505 0000110F 4889C7                  	mov rdi, rax
  1506 00001112 E821F8FFFF              	call _max
  1507 00001117 48894338                	mov qword [rbx + 56], rax
  1508 0000111B 488B4B40                	mov rcx, qword [rbx + 64]
  1509 0000111F 4C89F0                  	mov rax, r14
  1510 00001122 4889C6                  	mov rsi, rax
  1511 00001125 4889CF                  	mov rdi, rcx
  1512 00001128 E80BF8FFFF              	call _max
  1513 0000112D 48894340                	mov qword [rbx + 64], rax
  1514 00001131 41BF00000000            	mov r15, 0
  1515                                  	b72:
  1516 00001137 4983FF02                	cmp r15, 2
  1517 0000113B 7C75                    	jl b73
  1518                                  	b74:
  1519 0000113D 4C8B7B08                	mov r15, qword [rbx + 8]
  1520 00001141 488B4350                	mov rax, qword [rbx + 80]
  1521 00001145 4883780800              	cmp qword [rax + 8], 0
  1522 0000114A 741F                    	je b75
  1523                                  	b76:
  1524 0000114C 488B4350                	mov rax, qword [rbx + 80]
  1525 00001150 488B4008                	mov rax, qword [rax + 8]
  1526 00001154 488B4840                	mov rcx, qword [rax + 64]
  1527 00001158 B800000000              	mov rax, 0
  1528 0000115D 4889C6                  	mov rsi, rax
  1529 00001160 4889CF                  	mov rdi, rcx
  1530 00001163 E8D0F7FFFF              	call _max
  1531 00001168 4901C7                  	add r15, rax
  1532                                  	b75:
  1533 0000116B 488B4350                	mov rax, qword [rbx + 80]
  1534 0000116F 4883781000              	cmp qword [rax + 16], 0
  1535 00001174 741F                    	je b77
  1536                                  	b78:
  1537 00001176 488B4350                	mov rax, qword [rbx + 80]
  1538 0000117A 488B4010                	mov rax, qword [rax + 16]
  1539 0000117E 488B4838                	mov rcx, qword [rax + 56]
  1540 00001182 B800000000              	mov rax, 0
  1541 00001187 4889C6                  	mov rsi, rax
  1542 0000118A 4889CF                  	mov rdi, rcx
  1543 0000118D E8A6F7FFFF              	call _max
  1544 00001192 4901C7                  	add r15, rax
  1545                                  	b77:
  1546 00001195 488B4348                	mov rax, qword [rbx + 72]
  1547 00001199 4C89F9                  	mov rcx, r15
  1548 0000119C 4889CE                  	mov rsi, rcx
  1549 0000119F 4889C7                  	mov rdi, rax
  1550 000011A2 E891F7FFFF              	call _max
  1551 000011A7 48894348                	mov qword [rbx + 72], rax
  1552                                  	b79:
  1553 000011AB 415F                    	pop r15
  1554 000011AD 5B                      	pop rbx
  1555 000011AE 415E                    	pop r14
  1556 000011B0 C9                      	leave
  1557 000011B1 C3                      	ret 
  1558                                  	b73:
  1559 000011B2 488B4350                	mov rax, qword [rbx + 80]
  1560 000011B6 4A837CF80800            	cmp qword [rax + r15 * 8 + 8], 0
  1561 000011BC 7420                    	je b80
  1562                                  	b81:
  1563 000011BE 488B4B48                	mov rcx, qword [rbx + 72]
  1564 000011C2 488B4350                	mov rax, qword [rbx + 80]
  1565 000011C6 4A8B44F808              	mov rax, qword [rax + r15 * 8 + 8]
  1566 000011CB 488B4048                	mov rax, qword [rax + 72]
  1567 000011CF 4889C6                  	mov rsi, rax
  1568 000011D2 4889CF                  	mov rdi, rcx
  1569 000011D5 E85EF7FFFF              	call _max
  1570 000011DA 48894348                	mov qword [rbx + 72], rax
  1571                                  	b80:
  1572                                  	b82:
  1573 000011DE 49FFC7                  	inc r15
  1574 000011E1 E951FFFFFF              	jmp b72
  1575                                  	b66:
  1576 000011E6 488B4350                	mov rax, qword [rbx + 80]
  1577 000011EA 4A837CF80800            	cmp qword [rax + r15 * 8 + 8], 0
  1578 000011F0 742A                    	je b83
  1579                                  	b84:
  1580 000011F2 488B4350                	mov rax, qword [rbx + 80]
  1581 000011F6 4A8B44F808              	mov rax, qword [rax + r15 * 8 + 8]
  1582 000011FB 488B4B10                	mov rcx, qword [rbx + 16]
  1583 000011FF 48034810                	add rcx, qword [rax + 16]
  1584 00001203 48894B10                	mov qword [rbx + 16], rcx
  1585 00001207 488B4350                	mov rax, qword [rbx + 80]
  1586 0000120B 4A8B4CF808              	mov rcx, qword [rax + r15 * 8 + 8]
  1587 00001210 488B4318                	mov rax, qword [rbx + 24]
  1588 00001214 48034118                	add rax, qword [rcx + 24]
  1589 00001218 48894318                	mov qword [rbx + 24], rax
  1590                                  	b83:
  1591                                  	b85:
  1592 0000121C 49FFC7                  	inc r15
  1593 0000121F E92BFEFFFF              	jmp b65
  1594                                  _Node.addtag_ch:
  1595                                  	b86:
  1596 00001224 55                      	push rbp
  1597 00001225 4889E5                  	mov rbp, rsp
  1598 00001228 4889F1                  	mov rcx, rsi
  1599 0000122B 48894F08                	mov qword [rdi + 8], rcx
  1600 0000122F 488B4710                	mov rax, qword [rdi + 16]
  1601 00001233 48F7E9                  	imul rcx
  1602 00001236 48894718                	mov qword [rdi + 24], rax
  1603 0000123A 4883F900                	cmp rcx, 0
  1604 0000123E 7D0E                    	jge b87
  1605                                  	b88:
  1606 00001240 48894F38                	mov qword [rdi + 56], rcx
  1607 00001244 48894F40                	mov qword [rdi + 64], rcx
  1608 00001248 48894F48                	mov qword [rdi + 72], rcx
  1609 0000124C EB18                    	jmp b89
  1610                                  	b87:
  1611 0000124E 488B4718                	mov rax, qword [rdi + 24]
  1612 00001252 48894738                	mov qword [rdi + 56], rax
  1613 00001256 488B4718                	mov rax, qword [rdi + 24]
  1614 0000125A 48894740                	mov qword [rdi + 64], rax
  1615 0000125E 488B4718                	mov rax, qword [rdi + 24]
  1616 00001262 48894748                	mov qword [rdi + 72], rax
  1617                                  	b89:
  1618 00001266 48C7472001000000        	mov qword [rdi + 32], 1
  1619 0000126E 48894F28                	mov qword [rdi + 40], rcx
  1620                                  	b90:
  1621 00001272 C9                      	leave
  1622 00001273 C3                      	ret 
  1623                                  _Node.addtag_ro:
  1624                                  	b91:
  1625 00001274 55                      	push rbp
  1626 00001275 4889E5                  	mov rbp, rsp
  1627 00001278 4889FA                  	mov rdx, rdi
  1628 0000127B 488B4250                	mov rax, qword [rdx + 80]
  1629 0000127F 488B4808                	mov rcx, qword [rax + 8]
  1630 00001283 488B7250                	mov rsi, qword [rdx + 80]
  1631 00001287 488B4250                	mov rax, qword [rdx + 80]
  1632 0000128B 488B4010                	mov rax, qword [rax + 16]
  1633 0000128F 48894608                	mov qword [rsi + 8], rax
  1634 00001293 488B4250                	mov rax, qword [rdx + 80]
  1635 00001297 48894810                	mov qword [rax + 16], rcx
  1636 0000129B 488B4238                	mov rax, qword [rdx + 56]
  1637 0000129F 488B4A40                	mov rcx, qword [rdx + 64]
  1638 000012A3 48894A38                	mov qword [rdx + 56], rcx
  1639 000012A7 48894240                	mov qword [rdx + 64], rax
  1640 000012AB 488B4230                	mov rax, qword [rdx + 48]
  1641 000012AF 4883F001                	xor rax, 1
  1642 000012B3 48894230                	mov qword [rdx + 48], rax
  1643                                  	b92:
  1644 000012B7 C9                      	leave
  1645 000012B8 C3                      	ret 
  1646                                  _Node.push_down:
  1647                                  	b93:
  1648 000012B9 55                      	push rbp
  1649 000012BA 4889E5                  	mov rbp, rsp
  1650 000012BD 53                      	push rbx
  1651 000012BE 4157                    	push r15
  1652 000012C0 4889FB                  	mov rbx, rdi
  1653 000012C3 48837B2001              	cmp qword [rbx + 32], 1
  1654 000012C8 7514                    	jne b94
  1655                                  	b95:
  1656 000012CA 41BF00000000            	mov r15, 0
  1657                                  	b96:
  1658 000012D0 4983FF02                	cmp r15, 2
  1659 000012D4 7C4A                    	jl b97
  1660                                  	b98:
  1661 000012D6 48C7432000000000        	mov qword [rbx + 32], 0
  1662                                  	b94:
  1663 000012DE 48837B3001              	cmp qword [rbx + 48], 1
  1664 000012E3 7514                    	jne b99
  1665                                  	b100:
  1666 000012E5 41BF00000000            	mov r15, 0
  1667                                  	b101:
  1668 000012EB 4983FF02                	cmp r15, 2
  1669 000012EF 7C0D                    	jl b102
  1670                                  	b103:
  1671 000012F1 48C7433000000000        	mov qword [rbx + 48], 0
  1672                                  	b99:
  1673                                  	b104:
  1674 000012F9 415F                    	pop r15
  1675 000012FB 5B                      	pop rbx
  1676 000012FC C9                      	leave
  1677 000012FD C3                      	ret 
  1678                                  	b102:
  1679 000012FE 488B4350                	mov rax, qword [rbx + 80]
  1680 00001302 4A837CF80800            	cmp qword [rax + r15 * 8 + 8], 0
  1681 00001308 7411                    	je b105
  1682                                  	b106:
  1683 0000130A 488B4350                	mov rax, qword [rbx + 80]
  1684 0000130E 4A8B44F808              	mov rax, qword [rax + r15 * 8 + 8]
  1685 00001313 4889C7                  	mov rdi, rax
  1686 00001316 E859FFFFFF              	call _Node.addtag_ro
  1687                                  	b105:
  1688                                  	b107:
  1689 0000131B 49FFC7                  	inc r15
  1690 0000131E EBCB                    	jmp b101
  1691                                  	b97:
  1692 00001320 488B4350                	mov rax, qword [rbx + 80]
  1693 00001324 4A837CF80800            	cmp qword [rax + r15 * 8 + 8], 0
  1694 0000132A 7415                    	je b108
  1695                                  	b109:
  1696 0000132C 488B4350                	mov rax, qword [rbx + 80]
  1697 00001330 4A8B44F808              	mov rax, qword [rax + r15 * 8 + 8]
  1698 00001335 488B7328                	mov rsi, qword [rbx + 40]
  1699 00001339 4889C7                  	mov rdi, rax
  1700 0000133C E8E3FEFFFF              	call _Node.addtag_ch
  1701                                  	b108:
  1702                                  	b110:
  1703 00001341 49FFC7                  	inc r15
  1704 00001344 EB8A                    	jmp b96
  1705                                  _Node.rot:
  1706                                  	b111:
  1707 00001346 55                      	push rbp
  1708 00001347 4889E5                  	mov rbp, rsp
  1709 0000134A 4156                    	push r14
  1710 0000134C 53                      	push rbx
  1711 0000134D 4157                    	push r15
  1712 0000134F 4889FB                  	mov rbx, rdi
  1713 00001352 4C8B7B58                	mov r15, qword [rbx + 88]
  1714 00001356 4C89F8                  	mov rax, r15
  1715 00001359 4889DE                  	mov rsi, rbx
  1716 0000135C 4889C7                  	mov rdi, rax
  1717 0000135F E898FCFFFF              	call _Node.judge
  1718 00001364 4889C1                  	mov rcx, rax
  1719 00001367 4C89F8                  	mov rax, r15
  1720 0000136A 488B7050                	mov rsi, qword [rax + 80]
  1721 0000136E 4889C8                  	mov rax, rcx
  1722 00001371 4883F001                	xor rax, 1
  1723 00001375 488B5350                	mov rdx, qword [rbx + 80]
  1724 00001379 488B44C208              	mov rax, qword [rdx + rax * 8 + 8]
  1725 0000137E 488944CE08              	mov qword [rsi + rcx * 8 + 8], rax
  1726 00001383 4889CA                  	mov rdx, rcx
  1727 00001386 4883F201                	xor rdx, 1
  1728 0000138A 488B4350                	mov rax, qword [rbx + 80]
  1729 0000138E 4C897CD008              	mov qword [rax + rdx * 8 + 8], r15
  1730 00001393 4C89F8                  	mov rax, r15
  1731 00001396 488B4050                	mov rax, qword [rax + 80]
  1732 0000139A 48837CC80800            	cmp qword [rax + rcx * 8 + 8], 0
  1733 000013A0 7410                    	je b112
  1734                                  	b113:
  1735 000013A2 4C89F8                  	mov rax, r15
  1736 000013A5 488B4050                	mov rax, qword [rax + 80]
  1737 000013A9 488B44C808              	mov rax, qword [rax + rcx * 8 + 8]
  1738 000013AE 4C897858                	mov qword [rax + 88], r15
  1739                                  	b112:
  1740 000013B2 4C89F8                  	mov rax, r15
  1741 000013B5 488B4058                	mov rax, qword [rax + 88]
  1742 000013B9 48894358                	mov qword [rbx + 88], rax
  1743 000013BD 4C89F8                  	mov rax, r15
  1744 000013C0 48895858                	mov qword [rax + 88], rbx
  1745 000013C4 48837B5800              	cmp qword [rbx + 88], 0
  1746 000013C9 741C                    	je b114
  1747                                  	b115:
  1748 000013CB 4C8B7358                	mov r14, qword [rbx + 88]
  1749 000013CF 488B4358                	mov rax, qword [rbx + 88]
  1750 000013D3 4C89FE                  	mov rsi, r15
  1751 000013D6 4889C7                  	mov rdi, rax
  1752 000013D9 E81EFCFFFF              	call _Node.judge
  1753 000013DE 498B4E50                	mov rcx, qword [r14 + 80]
  1754 000013E2 48895CC108              	mov qword [rcx + rax * 8 + 8], rbx
  1755                                  	b114:
  1756 000013E7 4C89F8                  	mov rax, r15
  1757 000013EA 4889C7                  	mov rdi, rax
  1758 000013ED E83BFCFFFF              	call _Node.push_up
  1759                                  	b116:
  1760 000013F2 415F                    	pop r15
  1761 000013F4 5B                      	pop rbx
  1762 000013F5 415E                    	pop r14
  1763 000013F7 C9                      	leave
  1764 000013F8 C3                      	ret 
  1765                                  _Node.rotto:
  1766                                  	b117:
  1767 000013F9 55                      	push rbp
  1768 000013FA 4889E5                  	mov rbp, rsp
  1769 000013FD 4155                    	push r13
  1770 000013FF 4156                    	push r14
  1771 00001401 53                      	push rbx
  1772 00001402 4157                    	push r15
  1773 00001404 4989FE                  	mov r14, rdi
  1774 00001407 4989F5                  	mov r13, rsi
  1775                                  	b118:
  1776 0000140A 498B4E58                	mov rcx, qword [r14 + 88]
  1777 0000140E 4C89E8                  	mov rax, r13
  1778 00001411 4889C6                  	mov rsi, rax
  1779 00001414 4889CF                  	mov rdi, rcx
  1780 00001417 E832F5FFFF              	call _equ
  1781 0000141C 4883F800                	cmp rax, 0
  1782 00001420 757E                    	jne b119
  1783                                  	b120:
  1784 00001422 4D8B7E58                	mov r15, qword [r14 + 88]
  1785 00001426 4C89F8                  	mov rax, r15
  1786 00001429 488B4858                	mov rcx, qword [rax + 88]
  1787 0000142D 4C89E8                  	mov rax, r13
  1788 00001430 4889C6                  	mov rsi, rax
  1789 00001433 4889CF                  	mov rdi, rcx
  1790 00001436 E813F5FFFF              	call _equ
  1791 0000143B 4883F800                	cmp rax, 0
  1792 0000143F 7552                    	jne b121
  1793                                  	b122:
  1794 00001441 4C89F8                  	mov rax, r15
  1795 00001444 488B4058                	mov rax, qword [rax + 88]
  1796 00001448 4C89FE                  	mov rsi, r15
  1797 0000144B 4889C7                  	mov rdi, rax
  1798 0000144E E8A9FBFFFF              	call _Node.judge
  1799 00001453 4889C3                  	mov rbx, rax
  1800 00001456 4C89F8                  	mov rax, r15
  1801 00001459 4C89F6                  	mov rsi, r14
  1802 0000145C 4889C7                  	mov rdi, rax
  1803 0000145F E898FBFFFF              	call _Node.judge
  1804 00001464 4839C3                  	cmp rbx, rax
  1805 00001467 7412                    	je b123
  1806                                  	b124:
  1807 00001469 4C89F7                  	mov rdi, r14
  1808 0000146C E8D5FEFFFF              	call _Node.rot
  1809 00001471 4C89F7                  	mov rdi, r14
  1810 00001474 E8CDFEFFFF              	call _Node.rot
  1811 00001479 EB13                    	jmp b125
  1812                                  	b123:
  1813 0000147B 4C89F8                  	mov rax, r15
  1814 0000147E 4889C7                  	mov rdi, rax
  1815 00001481 E8C0FEFFFF              	call _Node.rot
  1816 00001486 4C89F7                  	mov rdi, r14
  1817 00001489 E8B8FEFFFF              	call _Node.rot
  1818                                  	b125:
  1819 0000148E E977FFFFFF              	jmp b118
  1820                                  	b121:
  1821 00001493 4C89F7                  	mov rdi, r14
  1822 00001496 E8ABFEFFFF              	call _Node.rot
  1823 0000149B E96AFFFFFF              	jmp b118
  1824                                  	b119:
  1825 000014A0 4C89F7                  	mov rdi, r14
  1826 000014A3 E885FBFFFF              	call _Node.push_up
  1827 000014A8 49837E5800              	cmp qword [r14 + 88], 0
  1828 000014AD 740C                    	je b126
  1829                                  	b127:
  1830 000014AF 498B4658                	mov rax, qword [r14 + 88]
  1831 000014B3 4889C7                  	mov rdi, rax
  1832 000014B6 E872FBFFFF              	call _Node.push_up
  1833                                  	b126:
  1834                                  	b128:
  1835 000014BB 415F                    	pop r15
  1836 000014BD 5B                      	pop rbx
  1837 000014BE 415E                    	pop r14
  1838 000014C0 415D                    	pop r13
  1839 000014C2 C9                      	leave
  1840 000014C3 C3                      	ret 
  1841                                  _splay_tree.splay_tree:
  1842                                  	b129:
  1843 000014C4 55                      	push rbp
  1844 000014C5 4889E5                  	mov rbp, rsp
  1845 000014C8 4889F8                  	mov rax, rdi
  1846 000014CB 48C70000000000          	mov qword [rax], 0
  1847                                  	b130:
  1848 000014D2 C9                      	leave
  1849 000014D3 C3                      	ret 
  1850                                  _splay_tree.build:
  1851                                  	b131:
  1852 000014D4 55                      	push rbp
  1853 000014D5 4889E5                  	mov rbp, rsp
  1854 000014D8 4883EC30                	sub rsp, 48
  1855 000014DC 4154                    	push r12
  1856 000014DE 4155                    	push r13
  1857 000014E0 4156                    	push r14
  1858 000014E2 53                      	push rbx
  1859 000014E3 4157                    	push r15
  1860 000014E5 4989FF                  	mov r15, rdi
  1861 000014E8 4989F6                  	mov r14, rsi
  1862 000014EB 4889D0                  	mov rax, rdx
  1863 000014EE 488945E0                	mov qword [rbp - 32], rax
  1864 000014F2 4989CD                  	mov r13, rcx
  1865 000014F5 4C89C0                  	mov rax, r8
  1866 000014F8 488945F0                	mov qword [rbp - 16], rax
  1867 000014FC 488B1D(28000000)        	mov rbx, qword [g_3]
  1868 00001503 4C8B25(20000000)        	mov r12, qword [g_9]
  1869 0000150A 4C89E9                  	mov rcx, r13
  1870 0000150D 488B45F0                	mov rax, qword [rbp - 16]
  1871 00001511 4801C1                  	add rcx, rax
  1872 00001514 4889C8                  	mov rax, rcx
  1873 00001517 B901000000              	mov rcx, 1
  1874 0000151C 48D3F8                  	sar rax, cl
  1875 0000151F 488945F8                	mov qword [rbp - 8], rax
  1876 00001523 BF60000000              	mov rdi, 96
  1877 00001528 E8(00000000)            	call malloc
  1878 0000152D 488945D8                	mov qword [rbp - 40], rax
  1879 00001531 488B45D8                	mov rax, qword [rbp - 40]
  1880 00001535 4889C1                  	mov rcx, rax
  1881 00001538 49FFC4                  	inc r12
  1882 0000153B 4C89E2                  	mov rdx, r12
  1883 0000153E 488B45F8                	mov rax, qword [rbp - 8]
  1884 00001542 488B74C308              	mov rsi, qword [rbx + rax * 8 + 8]
  1885 00001547 4889CF                  	mov rdi, rcx
  1886 0000154A E8FDF9FFFF              	call _Node.init
  1887 0000154F 4C89F1                  	mov rcx, r14
  1888 00001552 488B45D8                	mov rax, qword [rbp - 40]
  1889 00001556 4889C6                  	mov rsi, rax
  1890 00001559 4889CF                  	mov rdi, rcx
  1891 0000155C E842F9FFFF              	call _Node.copy
  1892 00001561 4C89F0                  	mov rax, r14
  1893 00001564 488B4DE0                	mov rcx, qword [rbp - 32]
  1894 00001568 48894858                	mov qword [rax + 88], rcx
  1895 0000156C 488B45F8                	mov rax, qword [rbp - 8]
  1896 00001570 4939C5                  	cmp r13, rax
  1897 00001573 0F8D81000000            	jge b132
  1898                                  	b133:
  1899 00001579 4C89F0                  	mov rax, r14
  1900 0000157C 488B4050                	mov rax, qword [rax + 80]
  1901 00001580 488945E8                	mov qword [rbp - 24], rax
  1902 00001584 BF60000000              	mov rdi, 96
  1903 00001589 E8(00000000)            	call malloc
  1904 0000158E 4889C1                  	mov rcx, rax
  1905 00001591 488B45E8                	mov rax, qword [rbp - 24]
  1906 00001595 48894808                	mov qword [rax + 8], rcx
  1907 00001599 4C89F0                  	mov rax, r14
  1908 0000159C 488B4050                	mov rax, qword [rax + 80]
  1909 000015A0 488B4008                	mov rax, qword [rax + 8]
  1910 000015A4 49FFC4                  	inc r12
  1911 000015A7 4C89E2                  	mov rdx, r12
  1912 000015AA BE00000000              	mov rsi, 0
  1913 000015AF 4889C7                  	mov rdi, rax
  1914 000015B2 E895F9FFFF              	call _Node.init
  1915 000015B7 4C89F0                  	mov rax, r14
  1916 000015BA 488B4050                	mov rax, qword [rax + 80]
  1917 000015BE 488B7008                	mov rsi, qword [rax + 8]
  1918 000015C2 4C89F2                  	mov rdx, r14
  1919 000015C5 4C89E8                  	mov rax, r13
  1920 000015C8 488B4DF8                	mov rcx, qword [rbp - 8]
  1921 000015CC 4883E901                	sub rcx, 1
  1922 000015D0 48891D(28000000)        	mov qword [g_3], rbx
  1923 000015D7 4C8925(20000000)        	mov qword [g_9], r12
  1924 000015DE 4989C8                  	mov r8, rcx
  1925 000015E1 4889C1                  	mov rcx, rax
  1926 000015E4 4C89FF                  	mov rdi, r15
  1927 000015E7 E8E8FEFFFF              	call _splay_tree.build
  1928 000015EC 4C8B25(20000000)        	mov r12, qword [g_9]
  1929 000015F3 488B1D(28000000)        	mov rbx, qword [g_3]
  1930                                  	b132:
  1931 000015FA 488B4DF0                	mov rcx, qword [rbp - 16]
  1932 000015FE 488B45F8                	mov rax, qword [rbp - 8]
  1933 00001602 4839C1                  	cmp rcx, rax
  1934 00001605 7E77                    	jle b134
  1935                                  	b135:
  1936 00001607 4C89F0                  	mov rax, r14
  1937 0000160A 4C8B6850                	mov r13, qword [rax + 80]
  1938 0000160E BF60000000              	mov rdi, 96
  1939 00001613 E8(00000000)            	call malloc
  1940 00001618 49894510                	mov qword [r13 + 16], rax
  1941 0000161C 4C89F0                  	mov rax, r14
  1942 0000161F 488B4050                	mov rax, qword [rax + 80]
  1943 00001623 488B4010                	mov rax, qword [rax + 16]
  1944 00001627 49FFC4                  	inc r12
  1945 0000162A 4C89E2                  	mov rdx, r12
  1946 0000162D BE00000000              	mov rsi, 0
  1947 00001632 4889C7                  	mov rdi, rax
  1948 00001635 E812F9FFFF              	call _Node.init
  1949 0000163A 4C89F0                  	mov rax, r14
  1950 0000163D 488B4050                	mov rax, qword [rax + 80]
  1951 00001641 488B7010                	mov rsi, qword [rax + 16]
  1952 00001645 4C89F2                  	mov rdx, r14
  1953 00001648 488B45F8                	mov rax, qword [rbp - 8]
  1954 0000164C 4883C001                	add rax, 1
  1955 00001650 4889C1                  	mov rcx, rax
  1956 00001653 488B45F0                	mov rax, qword [rbp - 16]
  1957 00001657 48891D(28000000)        	mov qword [g_3], rbx
  1958 0000165E 4C8925(20000000)        	mov qword [g_9], r12
  1959 00001665 4989C0                  	mov r8, rax
  1960 00001668 4C89FF                  	mov rdi, r15
  1961 0000166B E864FEFFFF              	call _splay_tree.build
  1962 00001670 4C8B25(20000000)        	mov r12, qword [g_9]
  1963 00001677 488B1D(28000000)        	mov rbx, qword [g_3]
  1964                                  	b134:
  1965 0000167E 4C89F0                  	mov rax, r14
  1966 00001681 4889C7                  	mov rdi, rax
  1967 00001684 E8A4F9FFFF              	call _Node.push_up
  1968                                  	b136:
  1969 00001689 48891D(28000000)        	mov qword [g_3], rbx
  1970 00001690 4C8925(20000000)        	mov qword [g_9], r12
  1971 00001697 415F                    	pop r15
  1972 00001699 5B                      	pop rbx
  1973 0000169A 415E                    	pop r14
  1974 0000169C 415D                    	pop r13
  1975 0000169E 415C                    	pop r12
  1976 000016A0 C9                      	leave
  1977 000016A1 C3                      	ret 
  1978                                  _splay_tree.build_tree:
  1979                                  	b137:
  1980 000016A2 55                      	push rbp
  1981 000016A3 4889E5                  	mov rbp, rsp
  1982 000016A6 4155                    	push r13
  1983 000016A8 4156                    	push r14
  1984 000016AA 53                      	push rbx
  1985 000016AB 4157                    	push r15
  1986 000016AD 4889FB                  	mov rbx, rdi
  1987 000016B0 4989F6                  	mov r14, rsi
  1988 000016B3 4989D5                  	mov r13, rdx
  1989 000016B6 4C8B3D(20000000)        	mov r15, qword [g_9]
  1990 000016BD BF60000000              	mov rdi, 96
  1991 000016C2 E8(00000000)            	call malloc
  1992 000016C7 488903                  	mov qword [rbx], rax
  1993 000016CA 488B03                  	mov rax, qword [rbx]
  1994 000016CD 49FFC7                  	inc r15
  1995 000016D0 4C89FA                  	mov rdx, r15
  1996 000016D3 BE00000000              	mov rsi, 0
  1997 000016D8 4889C7                  	mov rdi, rax
  1998 000016DB E86CF8FFFF              	call _Node.init
  1999 000016E0 488B33                  	mov rsi, qword [rbx]
  2000 000016E3 BA00000000              	mov rdx, 0
  2001 000016E8 4C89F0                  	mov rax, r14
  2002 000016EB 4C89E9                  	mov rcx, r13
  2003 000016EE 4C893D(20000000)        	mov qword [g_9], r15
  2004 000016F5 4989C8                  	mov r8, rcx
  2005 000016F8 4889C1                  	mov rcx, rax
  2006 000016FB 4889DF                  	mov rdi, rbx
  2007 000016FE E8D1FDFFFF              	call _splay_tree.build
  2008 00001703 4C8B3D(20000000)        	mov r15, qword [g_9]
  2009                                  	b138:
  2010 0000170A 4C893D(20000000)        	mov qword [g_9], r15
  2011 00001711 415F                    	pop r15
  2012 00001713 5B                      	pop rbx
  2013 00001714 415E                    	pop r14
  2014 00001716 415D                    	pop r13
  2015 00001718 C9                      	leave
  2016 00001719 C3                      	ret 
  2017                                  _splay_tree.find:
  2018                                  	b139:
  2019 0000171A 55                      	push rbp
  2020 0000171B 4889E5                  	mov rbp, rsp
  2021 0000171E 4156                    	push r14
  2022 00001720 53                      	push rbx
  2023 00001721 4157                    	push r15
  2024 00001723 4889F8                  	mov rax, rdi
  2025 00001726 4889F3                  	mov rbx, rsi
  2026 00001729 4C8B30                  	mov r14, qword [rax]
  2027 0000172C 41BF00000000            	mov r15, 0
  2028 00001732 4C89F0                  	mov rax, r14
  2029 00001735 488B4050                	mov rax, qword [rax + 80]
  2030 00001739 4883780800              	cmp qword [rax + 8], 0
  2031 0000173E 7507                    	jne b140
  2032                                  	b141:
  2033 00001740 B901000000              	mov rcx, 1
  2034 00001745 EB16                    	jmp b142
  2035                                  	b140:
  2036 00001747 4C89F0                  	mov rax, r14
  2037 0000174A 488B4050                	mov rax, qword [rax + 80]
  2038 0000174E 488B4008                	mov rax, qword [rax + 8]
  2039 00001752 488B4010                	mov rax, qword [rax + 16]
  2040 00001756 4883C001                	add rax, 1
  2041 0000175A 4889C1                  	mov rcx, rax
  2042                                  	b142:
  2043                                  	b143:
  2044 0000175D 4C89F8                  	mov rax, r15
  2045 00001760 4801C8                  	add rax, rcx
  2046 00001763 4839D8                  	cmp rax, rbx
  2047 00001766 750A                    	jne b144
  2048                                  	b145:
  2049 00001768 4C89F0                  	mov rax, r14
  2050                                  	b146:
  2051 0000176B 415F                    	pop r15
  2052 0000176D 5B                      	pop rbx
  2053 0000176E 415E                    	pop r14
  2054 00001770 C9                      	leave
  2055 00001771 C3                      	ret 
  2056                                  	b144:
  2057 00001772 4C89F8                  	mov rax, r15
  2058 00001775 4801C8                  	add rax, rcx
  2059 00001778 4839C3                  	cmp rbx, rax
  2060 0000177B 7C10                    	jl b147
  2061                                  	b148:
  2062 0000177D 4901CF                  	add r15, rcx
  2063 00001780 4C89F0                  	mov rax, r14
  2064 00001783 488B4050                	mov rax, qword [rax + 80]
  2065 00001787 4C8B7010                	mov r14, qword [rax + 16]
  2066 0000178B EB0B                    	jmp b149
  2067                                  	b147:
  2068 0000178D 4C89F0                  	mov rax, r14
  2069 00001790 488B4050                	mov rax, qword [rax + 80]
  2070 00001794 4C8B7008                	mov r14, qword [rax + 8]
  2071                                  	b149:
  2072 00001798 4C89F0                  	mov rax, r14
  2073 0000179B 4889C7                  	mov rdi, rax
  2074 0000179E E816FBFFFF              	call _Node.push_down
  2075 000017A3 4C89F0                  	mov rax, r14
  2076 000017A6 488B4050                	mov rax, qword [rax + 80]
  2077 000017AA 4883780800              	cmp qword [rax + 8], 0
  2078 000017AF 7507                    	jne b150
  2079                                  	b151:
  2080 000017B1 B901000000              	mov rcx, 1
  2081 000017B6 EB16                    	jmp b152
  2082                                  	b150:
  2083 000017B8 4C89F0                  	mov rax, r14
  2084 000017BB 488B4050                	mov rax, qword [rax + 80]
  2085 000017BF 488B4008                	mov rax, qword [rax + 8]
  2086 000017C3 488B4010                	mov rax, qword [rax + 16]
  2087 000017C7 4883C001                	add rax, 1
  2088 000017CB 4889C1                  	mov rcx, rax
  2089                                  	b152:
  2090 000017CE EB8D                    	jmp b143
  2091                                  _splay_tree.dfs:
  2092                                  	b153:
  2093 000017D0 55                      	push rbp
  2094 000017D1 4889E5                  	mov rbp, rsp
  2095 000017D4 4156                    	push r14
  2096 000017D6 53                      	push rbx
  2097 000017D7 4157                    	push r15
  2098 000017D9 4989FF                  	mov r15, rdi
  2099 000017DC 4989F6                  	mov r14, rsi
  2100 000017DF BB00000000              	mov rbx, 0
  2101                                  	b154:
  2102 000017E4 4883FB02                	cmp rbx, 2
  2103 000017E8 7C07                    	jl b155
  2104                                  	b156:
  2105                                  	b157:
  2106 000017EA 415F                    	pop r15
  2107 000017EC 5B                      	pop rbx
  2108 000017ED 415E                    	pop r14
  2109 000017EF C9                      	leave
  2110 000017F0 C3                      	ret 
  2111                                  	b155:
  2112 000017F1 4C89F0                  	mov rax, r14
  2113 000017F4 488B4050                	mov rax, qword [rax + 80]
  2114 000017F8 48837CD80800            	cmp qword [rax + rbx * 8 + 8], 0
  2115 000017FE 7417                    	je b158
  2116                                  	b159:
  2117 00001800 4C89F0                  	mov rax, r14
  2118 00001803 488B4050                	mov rax, qword [rax + 80]
  2119 00001807 488B44D808              	mov rax, qword [rax + rbx * 8 + 8]
  2120 0000180C 4889C6                  	mov rsi, rax
  2121 0000180F 4C89FF                  	mov rdi, r15
  2122 00001812 E8B9FFFFFF              	call _splay_tree.dfs
  2123                                  	b158:
  2124                                  	b160:
  2125 00001817 4889D8                  	mov rax, rbx
  2126 0000181A 48FFC3                  	inc rbx
  2127 0000181D EBC5                    	jmp b154
  2128                                  _splay_tree.del:
  2129                                  	b161:
  2130 0000181F 55                      	push rbp
  2131 00001820 4889E5                  	mov rbp, rsp
  2132 00001823 4156                    	push r14
  2133 00001825 53                      	push rbx
  2134 00001826 4157                    	push r15
  2135 00001828 4989FF                  	mov r15, rdi
  2136 0000182B 4989F6                  	mov r14, rsi
  2137 0000182E 4889D0                  	mov rax, rdx
  2138 00001831 4883C001                	add rax, 1
  2139 00001835 4889C6                  	mov rsi, rax
  2140 00001838 4C89FF                  	mov rdi, r15
  2141 0000183B E8DAFEFFFF              	call _splay_tree.find
  2142 00001840 4889C3                  	mov rbx, rax
  2143 00001843 4889D8                  	mov rax, rbx
  2144 00001846 BE00000000              	mov rsi, 0
  2145 0000184B 4889C7                  	mov rdi, rax
  2146 0000184E E8A6FBFFFF              	call _Node.rotto
  2147 00001853 49891F                  	mov qword [r15], rbx
  2148 00001856 4C89F0                  	mov rax, r14
  2149 00001859 4883E801                	sub rax, 1
  2150 0000185D 4889C6                  	mov rsi, rax
  2151 00001860 4C89FF                  	mov rdi, r15
  2152 00001863 E8B2FEFFFF              	call _splay_tree.find
  2153 00001868 4889C3                  	mov rbx, rax
  2154 0000186B 4889D8                  	mov rax, rbx
  2155 0000186E 498B37                  	mov rsi, qword [r15]
  2156 00001871 4889C7                  	mov rdi, rax
  2157 00001874 E880FBFFFF              	call _Node.rotto
  2158 00001879 4889D8                  	mov rax, rbx
  2159 0000187C 488B4050                	mov rax, qword [rax + 80]
  2160 00001880 4883781000              	cmp qword [rax + 16], 0
  2161 00001885 7416                    	je b162
  2162                                  	b163:
  2163 00001887 4889D8                  	mov rax, rbx
  2164 0000188A 488B4050                	mov rax, qword [rax + 80]
  2165 0000188E 488B4010                	mov rax, qword [rax + 16]
  2166 00001892 4889C6                  	mov rsi, rax
  2167 00001895 4C89FF                  	mov rdi, r15
  2168 00001898 E833FFFFFF              	call _splay_tree.dfs
  2169                                  	b162:
  2170 0000189D 4889D8                  	mov rax, rbx
  2171 000018A0 488B4050                	mov rax, qword [rax + 80]
  2172 000018A4 48C7401000000000        	mov qword [rax + 16], 0
  2173 000018AC 4889D8                  	mov rax, rbx
  2174 000018AF BE00000000              	mov rsi, 0
  2175 000018B4 4889C7                  	mov rdi, rax
  2176 000018B7 E83DFBFFFF              	call _Node.rotto
  2177 000018BC 49891F                  	mov qword [r15], rbx
  2178                                  	b164:
  2179 000018BF 415F                    	pop r15
  2180 000018C1 5B                      	pop rbx
  2181 000018C2 415E                    	pop r14
  2182 000018C4 C9                      	leave
  2183 000018C5 C3                      	ret 
  2184                                  _splay_tree.change:
  2185                                  	b165:
  2186 000018C6 55                      	push rbp
  2187 000018C7 4889E5                  	mov rbp, rsp
  2188 000018CA 4155                    	push r13
  2189 000018CC 4156                    	push r14
  2190 000018CE 53                      	push rbx
  2191 000018CF 4157                    	push r15
  2192 000018D1 4889FB                  	mov rbx, rdi
  2193 000018D4 4989F5                  	mov r13, rsi
  2194 000018D7 4889D0                  	mov rax, rdx
  2195 000018DA 4989CE                  	mov r14, rcx
  2196 000018DD 4883C001                	add rax, 1
  2197 000018E1 4889C6                  	mov rsi, rax
  2198 000018E4 4889DF                  	mov rdi, rbx
  2199 000018E7 E82EFEFFFF              	call _splay_tree.find
  2200 000018EC 4989C7                  	mov r15, rax
  2201 000018EF 4C89F8                  	mov rax, r15
  2202 000018F2 BE00000000              	mov rsi, 0
  2203 000018F7 4889C7                  	mov rdi, rax
  2204 000018FA E8FAFAFFFF              	call _Node.rotto
  2205 000018FF 4C893B                  	mov qword [rbx], r15
  2206 00001902 4C89E8                  	mov rax, r13
  2207 00001905 4883E801                	sub rax, 1
  2208 00001909 4889C6                  	mov rsi, rax
  2209 0000190C 4889DF                  	mov rdi, rbx
  2210 0000190F E806FEFFFF              	call _splay_tree.find
  2211 00001914 4989C7                  	mov r15, rax
  2212 00001917 4C89F8                  	mov rax, r15
  2213 0000191A 488B33                  	mov rsi, qword [rbx]
  2214 0000191D 4889C7                  	mov rdi, rax
  2215 00001920 E8D4FAFFFF              	call _Node.rotto
  2216 00001925 4C89F8                  	mov rax, r15
  2217 00001928 488B4050                	mov rax, qword [rax + 80]
  2218 0000192C 4C8B7810                	mov r15, qword [rax + 16]
  2219 00001930 4C89F8                  	mov rax, r15
  2220 00001933 4889C7                  	mov rdi, rax
  2221 00001936 E87EF9FFFF              	call _Node.push_down
  2222 0000193B 4C89F8                  	mov rax, r15
  2223 0000193E 4C89F6                  	mov rsi, r14
  2224 00001941 4889C7                  	mov rdi, rax
  2225 00001944 E8DBF8FFFF              	call _Node.addtag_ch
  2226 00001949 4C89F8                  	mov rax, r15
  2227 0000194C 4889C7                  	mov rdi, rax
  2228 0000194F E865F9FFFF              	call _Node.push_down
  2229 00001954 4C89F8                  	mov rax, r15
  2230 00001957 BE00000000              	mov rsi, 0
  2231 0000195C 4889C7                  	mov rdi, rax
  2232 0000195F E895FAFFFF              	call _Node.rotto
  2233 00001964 4C893B                  	mov qword [rbx], r15
  2234                                  	b166:
  2235 00001967 415F                    	pop r15
  2236 00001969 5B                      	pop rbx
  2237 0000196A 415E                    	pop r14
  2238 0000196C 415D                    	pop r13
  2239 0000196E C9                      	leave
  2240 0000196F C3                      	ret 
  2241                                  _splay_tree.rol:
  2242                                  	b167:
  2243 00001970 55                      	push rbp
  2244 00001971 4889E5                  	mov rbp, rsp
  2245 00001974 4156                    	push r14
  2246 00001976 53                      	push rbx
  2247 00001977 4157                    	push r15
  2248 00001979 4989FE                  	mov r14, rdi
  2249 0000197C 4889F3                  	mov rbx, rsi
  2250 0000197F 4889D0                  	mov rax, rdx
  2251 00001982 4883C001                	add rax, 1
  2252 00001986 4889C6                  	mov rsi, rax
  2253 00001989 4C89F7                  	mov rdi, r14
  2254 0000198C E889FDFFFF              	call _splay_tree.find
  2255 00001991 4989C7                  	mov r15, rax
  2256 00001994 4C89F8                  	mov rax, r15
  2257 00001997 BE00000000              	mov rsi, 0
  2258 0000199C 4889C7                  	mov rdi, rax
  2259 0000199F E855FAFFFF              	call _Node.rotto
  2260 000019A4 4D893E                  	mov qword [r14], r15
  2261 000019A7 4889D8                  	mov rax, rbx
  2262 000019AA 4883E801                	sub rax, 1
  2263 000019AE 4889C6                  	mov rsi, rax
  2264 000019B1 4C89F7                  	mov rdi, r14
  2265 000019B4 E861FDFFFF              	call _splay_tree.find
  2266 000019B9 4989C7                  	mov r15, rax
  2267 000019BC 4C89F8                  	mov rax, r15
  2268 000019BF 498B36                  	mov rsi, qword [r14]
  2269 000019C2 4889C7                  	mov rdi, rax
  2270 000019C5 E82FFAFFFF              	call _Node.rotto
  2271 000019CA 4C89F8                  	mov rax, r15
  2272 000019CD 488B4050                	mov rax, qword [rax + 80]
  2273 000019D1 4C8B7810                	mov r15, qword [rax + 16]
  2274 000019D5 4C89F8                  	mov rax, r15
  2275 000019D8 4889C7                  	mov rdi, rax
  2276 000019DB E8D9F8FFFF              	call _Node.push_down
  2277 000019E0 4C89F8                  	mov rax, r15
  2278 000019E3 4889C7                  	mov rdi, rax
  2279 000019E6 E889F8FFFF              	call _Node.addtag_ro
  2280 000019EB 4C89F8                  	mov rax, r15
  2281 000019EE 4889C7                  	mov rdi, rax
  2282 000019F1 E8C3F8FFFF              	call _Node.push_down
  2283 000019F6 4C89F8                  	mov rax, r15
  2284 000019F9 BE00000000              	mov rsi, 0
  2285 000019FE 4889C7                  	mov rdi, rax
  2286 00001A01 E8F3F9FFFF              	call _Node.rotto
  2287 00001A06 4D893E                  	mov qword [r14], r15
  2288                                  	b168:
  2289 00001A09 415F                    	pop r15
  2290 00001A0B 5B                      	pop rbx
  2291 00001A0C 415E                    	pop r14
  2292 00001A0E C9                      	leave
  2293 00001A0F C3                      	ret 
  2294                                  _splay_tree.getsum:
  2295                                  	b169:
  2296 00001A10 55                      	push rbp
  2297 00001A11 4889E5                  	mov rbp, rsp
  2298 00001A14 4156                    	push r14
  2299 00001A16 53                      	push rbx
  2300 00001A17 4157                    	push r15
  2301 00001A19 4989FF                  	mov r15, rdi
  2302 00001A1C 4989F6                  	mov r14, rsi
  2303 00001A1F 4889D0                  	mov rax, rdx
  2304 00001A22 4883C001                	add rax, 1
  2305 00001A26 4889C6                  	mov rsi, rax
  2306 00001A29 4C89FF                  	mov rdi, r15
  2307 00001A2C E8E9FCFFFF              	call _splay_tree.find
  2308 00001A31 4889C3                  	mov rbx, rax
  2309 00001A34 4889D8                  	mov rax, rbx
  2310 00001A37 BE00000000              	mov rsi, 0
  2311 00001A3C 4889C7                  	mov rdi, rax
  2312 00001A3F E8B5F9FFFF              	call _Node.rotto
  2313 00001A44 49891F                  	mov qword [r15], rbx
  2314 00001A47 4C89F0                  	mov rax, r14
  2315 00001A4A 4883E801                	sub rax, 1
  2316 00001A4E 4889C6                  	mov rsi, rax
  2317 00001A51 4C89FF                  	mov rdi, r15
  2318 00001A54 E8C1FCFFFF              	call _splay_tree.find
  2319 00001A59 4889C3                  	mov rbx, rax
  2320 00001A5C 4889D8                  	mov rax, rbx
  2321 00001A5F 498B37                  	mov rsi, qword [r15]
  2322 00001A62 4889C7                  	mov rdi, rax
  2323 00001A65 E88FF9FFFF              	call _Node.rotto
  2324 00001A6A 4889D8                  	mov rax, rbx
  2325 00001A6D 488B4050                	mov rax, qword [rax + 80]
  2326 00001A71 488B5810                	mov rbx, qword [rax + 16]
  2327 00001A75 4889D8                  	mov rax, rbx
  2328 00001A78 4889C7                  	mov rdi, rax
  2329 00001A7B E839F8FFFF              	call _Node.push_down
  2330 00001A80 4889D8                  	mov rax, rbx
  2331 00001A83 4C8B7018                	mov r14, qword [rax + 24]
  2332 00001A87 4889D8                  	mov rax, rbx
  2333 00001A8A BE00000000              	mov rsi, 0
  2334 00001A8F 4889C7                  	mov rdi, rax
  2335 00001A92 E862F9FFFF              	call _Node.rotto
  2336 00001A97 49891F                  	mov qword [r15], rbx
  2337 00001A9A 4C89F0                  	mov rax, r14
  2338                                  	b170:
  2339 00001A9D 415F                    	pop r15
  2340 00001A9F 5B                      	pop rbx
  2341 00001AA0 415E                    	pop r14
  2342 00001AA2 C9                      	leave
  2343 00001AA3 C3                      	ret 
  2344                                  _splay_tree.getMax:
  2345                                  	b171:
  2346 00001AA4 55                      	push rbp
  2347 00001AA5 4889E5                  	mov rbp, rsp
  2348 00001AA8 4157                    	push r15
  2349 00001AAA 4989FF                  	mov r15, rdi
  2350 00001AAD 498B07                  	mov rax, qword [r15]
  2351 00001AB0 4889C7                  	mov rdi, rax
  2352 00001AB3 E801F8FFFF              	call _Node.push_down
  2353 00001AB8 498B07                  	mov rax, qword [r15]
  2354 00001ABB 488B4048                	mov rax, qword [rax + 72]
  2355                                  	b172:
  2356 00001ABF 415F                    	pop r15
  2357 00001AC1 C9                      	leave
  2358 00001AC2 C3                      	ret 
  2359                                  __init:
  2360                                  	b173:
  2361 00001AC3 55                      	push rbp
  2362 00001AC4 4889E5                  	mov rbp, rsp
  2363 00001AC7 4156                    	push r14
  2364 00001AC9 53                      	push rbx
  2365 00001ACA 4157                    	push r15
  2366 00001ACC BB00CA9A3B              	mov rbx, 1000000000
  2367 00001AD1 B80A093D00              	mov rax, 4000010
  2368 00001AD6 41BF00000000            	mov r15, 0
  2369 00001ADC 4989C6                  	mov r14, rax
  2370 00001ADF 4A8D04F508000000        	lea rax, [r14 * 8 + 8]
  2371 00001AE7 4889C7                  	mov rdi, rax
  2372 00001AEA E8(00000000)            	call malloc
  2373 00001AEF 4C8930                  	mov qword [rax], r14
  2374                                  	b174:
  2375 00001AF2 4983FE00                	cmp r14, 0
  2376 00001AF6 7F51                    	jg b175
  2377                                  	b176:
  2378 00001AF8 4889C1                  	mov rcx, rax
  2379 00001AFB 48BA-                   	mov rdx, g_10
  2380 00001AFD [5D00000000000000] 
  2381 00001B05 4C893D(20000000)        	mov qword [g_9], r15
  2382 00001B0C 48890D(28000000)        	mov qword [g_3], rcx
  2383 00001B13 48891D(00000000)        	mov qword [g_4], rbx
  2384 00001B1A 488915(40000000)        	mov qword [g_6], rdx
  2385 00001B21 E80DEFFFFF              	call _main
  2386 00001B26 488B15(40000000)        	mov rdx, qword [g_6]
  2387 00001B2D 488B1D(00000000)        	mov rbx, qword [g_4]
  2388 00001B34 488B0D(28000000)        	mov rcx, qword [g_3]
  2389 00001B3B 4C8B3D(20000000)        	mov r15, qword [g_9]
  2390 00001B42 415F                    	pop r15
  2391 00001B44 5B                      	pop rbx
  2392 00001B45 415E                    	pop r14
  2393 00001B47 C9                      	leave
  2394 00001B48 C3                      	ret 
  2395                                  	b175:
  2396 00001B49 4AC704F000000000        	mov qword [rax + r14 * 8], 0
  2397 00001B51 49FFCE                  	dec r14
  2398 00001B54 EB9C                    	jmp b174
  2399                                  	section .data
  2400                                  g_4:
  2401 00000000 0000000000000000        	db 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
  2402                                  g_11:
  2403 00000008 0000000000000000        	db 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
  2404                                  g_1:
  2405 00000010 0000000000000000        	db 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
  2406                                  g_5:
  2407 00000018 0000000000000000        	db 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
  2408                                  g_9:
  2409 00000020 0000000000000000        	db 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
  2410                                  g_3:
  2411 00000028 0000000000000000        	db 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
  2412                                  g_2:
  2413 00000030 0000000000000000        	db 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
  2414                                  g_0:
  2415 00000038 0000000000000000        	db 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
  2416                                  g_6:
  2417 00000040 0000000000000000        	db 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
  2418                                  g_7:
  2419 00000048 0200000000000000        	dq 2
  2420 00000050 300A00                  	db 30H, 0AH, 00H
  2421                                  g_8:
  2422 00000053 0100000000000000        	dq 1
  2423 0000005B 0A00                    	db 0AH, 00H
  2424                                  g_10:
  2425 0000005D 0200000000000000        	dq 2
  2426 00000065 494400                  	db 49H, 44H, 00H
